<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Layered Architecture</title>
      <link href="/2020/10/03/layered-architecture/"/>
      <url>/2020/10/03/layered-architecture/</url>
      
        <content type="html"><![CDATA[<h2 id="Background-MVC-model"><a href="#Background-MVC-model" class="headerlink" title="Background: MVC model"></a>Background: MVC model</h2><blockquote><p>Model-view-controller (usually known as MVC) is a software design pattern<br>commonly used for developing user interfaces that divides the related program logic<br>into three interconnected elements.</p></blockquote><h3 id="Components"><a href="#Components" class="headerlink" title="Components"></a>Components</h3><p><img src="/images/MVC-Process-crop.pdf" alt="MVC Process"></p><h4 id="Model"><a href="#Model" class="headerlink" title="Model"></a>Model</h4><blockquote><p>The central component of the pattern. It is the application’s dynamic data structure,<br>independent of the user interface. It directly manages the data, logic and rules of the application.</p></blockquote><h4 id="View"><a href="#View" class="headerlink" title="View"></a>View</h4><blockquote><p>Any representation of information such as chart, diagram or table.<br>Mulitple view of the same informantion are possible,<br>such as a bar chart for management and tabular view for accountants.</p></blockquote><h4 id="Controller"><a href="#Controller" class="headerlink" title="Controller"></a>Controller</h4><blockquote><p>Accepts input and converts it to commands for the model or view</p><ul><li>The model is responsible for managing the data of the application. It receives user input from the controller.</li><li>The view means presentation of the model in a particular format.</li><li>The controller responds to the user input and performs interactions on the data model objects.<br>The controller receives the input, optionally validates it and then passes the input to the model.</li></ul></blockquote><p>웹 페이지는 중복 개발되는 요소가 존재한다.</p><p>Controller에서 중복으로 호출 되는 부분을 처리하기 위해서</p><ul><li>별도의 객체로 분리한다.</li><li>별도의 메소드로 분리한다.</li></ul><h2 id="Controller와-Service"><a href="#Controller와-Service" class="headerlink" title="Controller와 Service"></a>Controller와 Service</h2><p>Business method를 별도의 Service 객체에서 구현하도록 하고 컨트롤러는 Service객체를 사용하도록 한다.</p><h3 id="Service-객체"><a href="#Service-객체" class="headerlink" title="Service 객체"></a>Service 객체</h3><blockquote><p>Between the controller and the model, a layer called a <em>service</em> is sometimes interposed.<br>It fetches data from the model and lets the controller use the fetched data.<br>This layer allows a cleaner separation of data storage (model), data fetching (service) and data manipulation (controller).<br>Since this layer is not part of the original MVC concept, it is optional,<br>but can be useful for code management and reusability purposes in some cases.</p></blockquote><p>Business logic을 수행하는 method를 가지고 있는 객체를 서비스 객체라고 한다.<br>보통 하나의 Business logic은 하나의 <em>transaction</em> 으로 동작한다.</p><h3 id="Transaction"><a href="#Transaction" class="headerlink" title="Transaction"></a>Transaction</h3><ol><li><p>원자성 (Atomicity)<br>모든 과정이 성공했을 때만 정보를 반영한다</p></li><li><p>일관성 (Consistency)<br>Transaction 작업 처리 결과가 항상 일관성이 있어야 한다. 처음에 참조한 데이터로 transaction이 진행 되어야 한다. 각 사용자가 일관된 데이터를 볼 수 있다.</p></li><li><p>독립성 (Isolation)<br>독립성은 둘 이상의 Transaction이 동시에 병행 실행되고 있을 경우, 어느 하나의 transaction이라도 다른 transaction의 연산에 끼어들 수 없다.</p></li><li><p>지속성 (Durability)<br>지속성은 transaction이 성공적으로 완료되었을 경우, 결과는 영구적으로 반영되어야 한다는 점 입니다.</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> Web Architecture </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Model-view-controller </tag>
            
            <tag> Layered Architecture </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>REST API</title>
      <link href="/2020/10/03/REST-API/"/>
      <url>/2020/10/03/REST-API/</url>
      
        <content type="html"><![CDATA[<h2 id="Background"><a href="#Background" class="headerlink" title="Background"></a>Background</h2><p>2000년도에 Roy Fielding 박사의 학위논문에 REST라는 개념이 처음 등장<br><strong>REST</strong>는 ‘Representational State Transfer’의 약자로 자원을 이름으로 구분 하여<br>해당 자원의 상태(정보)를 주고 받는 것을 의미한다.<br>Roy Fielding은 Web Architecture의 요구사항과 해결해야할 문제를 설명하고 이를 해결하기 위한<br>접근 방법을 논문에서 제시 하며, 이를 위한 아키텍처 스타일인 REST를 소개 합니다.</p><p>REST는 기본적으로 Web의 기존 기술과 HTTP protocol을 그대로 활용하기 때문에 Web의 장점을 최대한<br>활용할 수 있는 아키텍처 스타일이다.</p><h3 id="REST-구성"><a href="#REST-구성" class="headerlink" title="REST 구성"></a>REST 구성</h3><p>REST API는 다음과 같은 3가지 구분으로 구성 됩니다.</p><ul><li>자원(Resource): 자원은 Data, Meta Data, HATEOAS</li><li>행위(Verb): HTTP Method로 표현됩니다.</li><li>표현(Representations)</li></ul><h3 id="REST의-특징"><a href="#REST의-특징" class="headerlink" title="REST의 특징"></a>REST의 특징</h3><ol><li><p>Uniform Interface<br>구성 요소(Client, Server 등) 사이의 인터페이스는 균일(uniform) 해야한다.<br>인터페이스를 일반화함으로써, 전체 시스템의 아키텍처가 단순해지고, 상호 작용의 가시성이 개선되며,<br>구현과 서비스가 분리되므로 독립적인 진화가 가능해질 수 있다.</p></li><li><p>Stateless<br>클라이언트와 서버의 통신에는 상태가 없어야한다. 모든 요청은 필요한 모든 정보를 담고 있어야 한다.<br>요청 하나만 봐도 뭔지 알 수 있으므로 가시성이 개선되고, task 실패시 복원이 쉬우므로 신뢰성이 개선되며,<br>상태를 저장할 필요가 없으므로 규모 확장성이 개선될 수 있다.</p></li><li><p>Cacheable<br>캐시가 가능해야한다. 즉, 모든 서버 응답은 캐시가 가능한지 아닌지 알 수 있어야함<br>효율, 규모 확장성, 사용자 입장에서의 성능이 개선 된다.</p></li><li><p>Self-descriptiveness<br>REST의 또 다른 큰 특징 중 하나는 REST API 메시지만 보고도 이를 쉽게 이해 할 수 있는 자체 표현 구조로 되어 있다는 것</p></li><li><p>Client - Server 구조<br>클라이언트 - 서버 스타일은 사용자 인터페이스에 대한 관심(concern)을 데이터 저장에 대한 관심으로 부터 분리<br>함으로써 클라이언트의 이식성과 서버의 규모 확장성을 개선할 수 있다.</p></li><li><p>Layered System<br>REST 서버는 다중 계층으로 구성될 수 있으며 보안, 로드 밸런싱, 암호화 계층을 추가해 구조상의 유연성을 둘 수 있고 PROXY, 게이트웨이 같은 네트워크 기반의 중간 매체를 사용할 수 있게 합니다.</p></li></ol><h3 id="REST-API-설계-가이드"><a href="#REST-API-설계-가이드" class="headerlink" title="REST API 설계 가이드"></a>REST API 설계 가이드</h3><p>REST API 설계시 가장 중요한 항목은 다음의 2가지로 요약 할 수 있다.<br>첫 번째, URI는 정보의 자원을 표현해야 한다.<br>두 번째, 자원에 대한 행위는 HTTP Method (GET, POST, PUT, DELETE)로 표현한다.</p><ol><li>URI는 정보의 자원을 표현해야 한다.</li><li>자원에 대한 행위는 HTTP Method (GET, POST, PUT, DELETE)로 표현 한다.</li><li>URI에 HTTP Method가 들어가면 안된다.</li><li>URI에 행위에 대한 동사 표현이 들어가면 안된다.</li><li>경로 부분 중 변하는 부분은 유일한 값으로 대체 한다.</li><li>슬래시 구분자(/)는 계층 관계를 나타내는데 사용한다.</li><li>URI 마지막 문제로 (/)를 포함하지 않는다.</li><li>URI에 포함되는 모든 글자는 리소스의 유일한 식별자로 사용되어야 하며,<br>URI가 다르다는 것은 리소스가 다르다는 것이고, 역으로 리소스가 다르면 URI도 달라져야 한다.</li><li>하이픈(-)은 URI 가독성을 높이는데 사용할 수 있다.</li><li>under score는 URI에 사용하지 않는다.</li><li>URI 경로에는 소문자가 적합하다.</li><li>파일 확장자는 URI에 포함하지 않는다 Accept header를 사용하도록 한다.</li><li>리소스 간에 연관 관계가 있는 경우 다음과 같은 방법으로 표현 한다.<br>ex) GET: /books/{bookid}/viewers (일반적으로 소유 ‘has’ 관계를 표현할 때)</li><li>자원을 표현하는 Collection과 Document<br>Collection은 객체의 집합, Document는 객체라고 생각하면 된다. Collection과 Document모두 리소스로 표현 할 수 있으며 URI로 표현 할 수 있다.</li></ol><p>-&gt; REST API를 완벽하게 구현하지 못할 경우 Web API라 한다.</p>]]></content>
      
      
      <categories>
          
          <category> REST </category>
          
          <category> REST API </category>
          
      </categories>
      
      
        <tags>
            
            <tag> REST </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java Collections Framework</title>
      <link href="/2020/09/09/Java-collection-type/"/>
      <url>/2020/09/09/Java-collection-type/</url>
      
        <content type="html"><![CDATA[<h2 id="Java-Collections-Framework"><a href="#Java-Collections-Framework" class="headerlink" title="Java Collections Framework"></a>Java Collections Framework</h2><ul><li><code>java.utils</code>에 속한 일련의 클래스로, 자료구조를 담당</li><li>잘 짜여진 <code>interface</code>를 기반으로 다양한 자료구조를 구현</li><li>Generic class로 되어 있어, 다양한 객체를 요소로 담을 수 있다.</li></ul><blockquote><p>some are excerpted from <a href="https://docs.oracle.com/javase/8/docs/technotes/guides/collections/overview.html">Java collections overview</a></p></blockquote><h2 id="Advantages-of-a-collections-framework"><a href="#Advantages-of-a-collections-framework" class="headerlink" title="Advantages of a collections framework"></a>Advantages of a collections framework</h2><ul><li>Reduces programming effort</li><li>Increase performance</li><li>Provide interoperability between unrelated APIs</li><li>Reduces the effort required to learn APIs</li><li>Reduces the effort required to design and implement APIs</li><li>Fosters software reuse</li></ul><h2 id="Collection-Interfaces"><a href="#Collection-Interfaces" class="headerlink" title="Collection Interfaces"></a>Collection Interfaces</h2><ul><li><a href="https://docs.oracle.com/javase/8/docs/api/java/util/Collection.html">Collection</a><ul><li>A group of objects. No assumptions are made about the order of the collection (if any) or whether it can contain duplicate elements.</li></ul></li><li><a href="https://docs.oracle.com/javase/8/docs/api/java/util/Set.html">Set</a><ul><li>The familiar set abstraction. No duplicate elements permitted. May or may not be ordered. Extends the Collection interface.</li></ul></li><li><a href="https://docs.oracle.com/javase/8/docs/api/java/util/List.html">List</a><ul><li>Ordered collection, also known as a sequence. Duplicates are generally permitted. Allows positional access. Extends the Collection interface.</li></ul></li><li><a href="https://docs.oracle.com/javase/8/docs/api/java/util/Queue.html">Queue</a><ul><li>A collection designed for holding elements before processing. Besides basic Collection operations, queues provide additional insertion, extraction, and inspection operations.</li></ul></li><li><a href="https://docs.oracle.com/javase/8/docs/api/java/util/Deque.html">Deque</a><ul><li>A double ended queue, supporting element insertion and removal at both ends. Extends the Queue interface.</li></ul></li><li><a href="https://docs.oracle.com/javase/8/docs/api/java/util/Map.html">Map</a><ul><li>A mapping from keys to values. Each key can map to one value.</li></ul></li></ul><h2 id="Method-of-Collection-Interfaces"><a href="#Method-of-Collection-Interfaces" class="headerlink" title="Method of Collection Interfaces"></a>Method of Collection Interfaces</h2><table><thead><tr><th align="left">Method</th><th align="left">Description</th></tr></thead><tbody><tr><td align="left"><code>boolean add(E e)</code></td><td align="left">Ensures that collection contains the specified element.</td></tr><tr><td align="left"><code>boolean addAll(Collection&lt;? exteionds E&gt; c)</code></td><td align="left">Adds all of the elements in the specified collection to this collection.</td></tr><tr><td align="left"><code>void clear()</code></td><td align="left">Removes all of the elements from this collection.</td></tr><tr><td align="left"><code>boolean contains(Object o)</code></td><td align="left">Returns <code>true</code> if this collection contains the specified element.</td></tr><tr><td align="left"><code>boolean containsAll(Collection&lt;?&gt; c)</code></td><td align="left">Returns <code>true</code> if this collection contains all of the elements in the specified collection.</td></tr><tr><td align="left"><code>boolean equals(Object o)</code></td><td align="left">Compares the specified object with this collection for equality.</td></tr><tr><td align="left"><code>boolean isEmpty()</code></td><td align="left">Returns <code>true</code> if this collection contains no elements.</td></tr><tr><td align="left"><code>Iterator&lt;E&gt; iterator()</code></td><td align="left">Returns <code>true</code> if this collection contains on elements.</td></tr><tr><td align="left"><code>boolean remove(Object o)</code></td><td align="left">Remove a single instance of the specified elemtns from this collection, if it is present.</td></tr><tr><td align="left"><code>boolean removeAll(Collection&lt;?&gt; c)</code></td><td align="left">Removes all of this collection’s elements that are also contained in the specified collection.</td></tr><tr><td align="left"><code>boolean retainAll(Collection&lt;?&gt; c)</code></td><td align="left">Retains only the elements in this collection that are contained in the specified collection.</td></tr><tr><td align="left"><code>int size()</code></td><td align="left">Returns the number of elements in this collection.</td></tr><tr><td align="left"><code>T[] toArray(T[] a)</code></td><td align="left">Returns an array containing all of the elements in this collection; the runtime type of the returned array is that of the specified array.</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
          <category> collections </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> collections </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java Enum Types</title>
      <link href="/2020/09/09/Java-Enum/"/>
      <url>/2020/09/09/Java-Enum/</url>
      
        <content type="html"><![CDATA[<p>Excerpts from <a href="https://docs.oracle.com/javase/tutorial/java/javaOO/enum.html">Enum Types</a></p><blockquote><p>An <em>enum type</em> is a special data type that enables for a variable to  be a set of predefined constants. The variable must be equal to one of the values that have been predefined for it.</p></blockquote><p>Common examples: Compass directions(NORTH, SOUTH, EAST, and WEST) and the days of the week.</p><p>Because they are constants, the name of an enum type’s field are in uppercase letters.</p><p>Java programming languague enum types are much more powerful than theirs conunterparts in other languages. The enum declaration defines a <em>class</em> (called and <em>enum type</em> which implicitly extends <code>java.lang.Enum</code>). The enum class body can include method and other fields.</p><p>The constructor for an enum type must be package-private or private access. It automatically creates the constants that are defined at the beginning of the enum body. You cannot invoke an enum constructor yourself.</p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
          <category> Enum </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> Enum </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Dependency Injection in Spring</title>
      <link href="/2020/09/06/Dependency-Injection-in-Spring/"/>
      <url>/2020/09/06/Dependency-Injection-in-Spring/</url>
      
        <content type="html"><![CDATA[<h2 id="Container"><a href="#Container" class="headerlink" title="Container"></a>Container</h2><p>Application 코드를 작성할때, 특정 기능이 필요하면 Library를 호출하여 사용한다. 프로그램의 흐름을 제어아하는 주체가 Application code이다. Framework 기반의 개발에서는 Framework 자신이 흐름을 제어하는 주체가 되어, 필요할 때마다 Application 코드를 호출하여 사용한다.</p><p>컨테이너는 instance의 생명주기를 관리하며, 생성된 instance에게 추가적인 기능을 제공합니다.<br>예를 들어, Servlet을 실행해주는 WAS는 Servlet Contatiner를 가지고 있다고 말합니다.<br>WAS는 Web browser로부터 Servlet URL에 해당하는 요청을 받으면, Servlet을 메모리에 올린 후 실행 합니다.<br>개발자가 Servlet Class를 작성했지만 실제로 메모리에 올리고 실행하는 것은 WAS가 가지고 있는 Servlet Container 입니다.<br>Servlet Container는 동일한 Servlet에 해당하는 요청을 받으면, 또 메모리에 올리지 않고 기존에 메모리에 올라간 Servlet을 실행하여 그 결과를 Web browser에게 전달 합니다.<br>Container는 보통 instance의 생명 주기를 관리하며, 생성된 instance들에게 추가적인 기능을 제공하는 것을 말합니다.</p><h2 id="DI-Dependency-Injection"><a href="#DI-Dependency-Injection" class="headerlink" title="DI(Dependency Injection)"></a>DI(Dependency Injection)</h2><p>DI는 의존성 주입이라는 뜻을 가지고 있다. Class사이의 의존 관계를 Bean 설정 정보를 바탕으로 Container가 자동으로 연결 해 주는 것을 말한다.<br>개발자들은 제어를 담당할 필요 없이 Bean 설정 파일에 의존관계가 필요하다는 정보만 추가해주면 된다.<br>Object reference를 Container로부터 주입 받아서, 실행 시에 동적으로 의존 관계가 생성된다.<br>Container가 흐름의 주체가 되어서 Application code에 의존관계를 주입해주는 것이 된다.<br>이것을 *eInversion of Control** 이라 부른다.</p><h2 id="Spring-Framework에서-DI-적용-예-2가지"><a href="#Spring-Framework에서-DI-적용-예-2가지" class="headerlink" title="Spring Framework에서 DI 적용 예 2가지"></a>Spring Framework에서 DI 적용 예 2가지</h2><h3 id="xml-파일을-이용한-설정"><a href="#xml-파일을-이용한-설정" class="headerlink" title="xml 파일을 이용한 설정"></a>xml 파일을 이용한 설정</h3><ul><li>src/main 아래에 UserBean class 작성</li></ul><p>Bean class의 몇가지 특성</p><ol><li>기본 생성자를 가지고 있다.</li><li>필드는 private하게 선언한다.</li><li>getter, setter method를 가진다. getName(), setName() method를 name property라고 한다.</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> kr.or.connect.diexam01;</span><br><span class="line"></span><br><span class="line"><span class="comment">//빈클래스</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserBean</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//필드는 private한다.</span></span><br><span class="line">  <span class="keyword">private</span> String name;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">boolean</span> male;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//기본생성자를 반드시 가지고 있어야 한다.</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="title">UserBean</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="title">UserBean</span><span class="params">(String name, <span class="keyword">int</span> age, <span class="keyword">boolean</span> male)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.name = name;</span><br><span class="line">    <span class="keyword">this</span>.age = age;</span><br><span class="line">    <span class="keyword">this</span>.male = male;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// setter, getter메소드는 프로퍼티라고 한다.</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.name = name;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> name;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getAge</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> age;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(<span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.age = age;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isMale</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> male;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setMale</span><span class="params">(<span class="keyword">boolean</span> male)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.male = male;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>src/main/reource folder에 applicationContext.xml을 생성</li></ul><p>UserBean class 의 instance 를 userBean이라는 이름으로 생성 할 수 있도록 xml을 작성 합니다.</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;userBean&quot;</span> <span class="attr">class</span>=<span class="string">&quot;kr.or.connect.diexam01.UserBean&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>ApplicationContext를 이용해서 설정파일을 읽어들여서 실행</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> kr.or.connect.diexam01;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.context.ApplicationContext;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.support.ClassPathXmlApplicationContext;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ApplicationContextExam01</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    ApplicationContext ac = <span class="keyword">new</span> ClassPathXmlApplicationContext(</span><br><span class="line">        <span class="string">&quot;classpath:applicationContext.xml&quot;</span>);</span><br><span class="line">    System.out.println(<span class="string">&quot;초기화 완료.&quot;</span>);</span><br><span class="line"></span><br><span class="line">    UserBean userBean = (UserBean)ac.getBean(<span class="string">&quot;userBean&quot;</span>);</span><br><span class="line">    userBean.setName(<span class="string">&quot;kim&quot;</span>);</span><br><span class="line">    System.out.println(userBean.getName());</span><br><span class="line"></span><br><span class="line">    UserBean userBean2 = (UserBean)ac.getBean(<span class="string">&quot;userBean&quot;</span>);</span><br><span class="line">    <span class="keyword">if</span>(userBean == userBean2) &#123;</span><br><span class="line">      System.out.println(<span class="string">&quot;같은 인스턴스이다.&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="xml을-이용한-설정으로-DI-확인"><a href="#xml을-이용한-설정으로-DI-확인" class="headerlink" title="xml을 이용한 설정으로 DI 확인"></a>xml을 이용한 설정으로 DI 확인</h4><p>Car의 Engine class 작성</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> kr.or.connect.diexam01;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Engine</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="title">Engine</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;Engine 생성자&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">exec</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;엔진이 동작합니다.&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Car class 작성</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> kr.or.connect.diexam01;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Car</span> </span>&#123;</span><br><span class="line">  Engine v8;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="title">Car</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;Car 생성자&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setEngine</span><span class="params">(Engine e)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.v8 = e;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;엔진을 이용하여 달립니다.&quot;</span>);</span><br><span class="line">    v8.exec();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Spring container에게 engine 객체의 injection을 맡기기 위해 다음과 같이 xml에 작성합니다.</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;e&quot;</span> <span class="attr">class</span>=<span class="string">&quot;kr.or.connect.diexam01.Engine&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;car&quot;</span> <span class="attr">class</span>=<span class="string">&quot;kr.or.connect.diexam01.Car&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;engine&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;e&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><p>위의 xml파일을 읽어들여서 작동하게끔 작성하면 다음과 같습니다.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> kr.or.connect.diexam01;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.context.ApplicationContext;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.support.ClassPathXmlApplicationContext;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ApplicationContextExam02</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    ApplicationContext ac = <span class="keyword">new</span> ClassPathXmlApplicationContext(</span><br><span class="line">        <span class="string">&quot;classpath:applicationContext.xml&quot;</span>);</span><br><span class="line"></span><br><span class="line">    Car car = (Car)ac.getBean(<span class="string">&quot;car&quot;</span>);</span><br><span class="line">    car.run();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Java-config를-이용한-설정"><a href="#Java-config를-이용한-설정" class="headerlink" title="Java config를 이용한 설정"></a>Java config를 이용한 설정</h3><ul><li>Annotaions<ul><li>@Configuration<ul><li>스프링 설정 클래스를 선언하는 어노테이션</li></ul></li><li>@Bean<ul><li>bean을 정의하는 어노테이션</li></ul></li><li>@ComponentScan<ul><li>@Controller, @Service, @Repository, @Component 어노테이션이 붙은 클래스를 찾아 컨테이너에 등록</li></ul></li><li>@Component<ul><li>컴포넌트 스캔의 대상이 되는 애노테이션 중 하나로써 주로 유틸, 기타 지원 클래스에 붙이는 어노테이션</li></ul></li><li>@Autowired<ul><li>주입 대상이되는 bean을 컨테이너에 찾아 주입하는 어노테이션</li></ul></li></ul></li></ul><p>Java Config 설정</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> kr.or.connect.diexam01;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.*;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ApplicationConfig</span> </span>&#123;</span><br><span class="line">  <span class="meta">@Bean</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> Car <span class="title">car</span><span class="params">(Engine e)</span> </span>&#123;</span><br><span class="line">    Car c = <span class="keyword">new</span> Car();</span><br><span class="line">    c.setEngine(e);</span><br><span class="line">    <span class="keyword">return</span> c;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Bean</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> Engine <span class="title">engine</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> Engine();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>@Configuration 은 스프링 설정 클래스라는 의미를 가집니다.<br>JavaConfig로 설정을 할 클래스 위에는 @Configuration가 붙어 있어야 합니다.<br>ApplicationContext중에서 AnnotationConfigApplicationContext는 JavaConfig클래스를 읽어들여 IoC와 DI를 적용하게 됩니다.<br>이때 설정파일 중에 @Bean이 붙어 있는 메소드들을 AnnotationConfigApplicationContext는 자동으로 실행하여 그 결과로 리턴하는 객체들을 기본적으로 싱글턴으로 관리를 하게 됩니다.</p><p>DI 적용 확인</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> kr.or.connect.diexam01;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.context.ApplicationContext;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.AnnotationConfigApplicationContext;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ApplicationContextExam03</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    ApplicationContext ac = <span class="keyword">new</span> AnnotationConfigApplicationContext(ApplicationConfig.class);</span><br><span class="line"></span><br><span class="line">    Car car = (Car)ac.getBean(<span class="string">&quot;car&quot;</span>); <span class="comment">// Car.class로도 가능</span></span><br><span class="line">    car.run();</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Annotation만을-활용한-ApplicationConfig-설정"><a href="#Annotation만을-활용한-ApplicationConfig-설정" class="headerlink" title="Annotation만을 활용한 ApplicationConfig 설정"></a>Annotation만을 활용한 ApplicationConfig 설정</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> kr.or.connect.diexam01;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.*;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@ComponentScan(&quot;kr.or.connect.diexam01&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ApplicationConfig2</span> </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>@ComponentScan이라는 annotation 추가<br>@ComponentScan annotation은 parameter로 들어온 package 이하에서 @Controller, @service, @Repository, @Component annotation이 붙어있는 class를 찾아서 메모리에 몽따 올린다.</p><p>기존에 작성한 Car class에 @Component annotation 추가</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> kr.or.connect.diexam01;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Engine</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="title">Engine</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;Engine 생성자&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">exec</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;엔진이 동작합니다.&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>DI 가 필요한 부분에는 @Autowired annotation 적용</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> kr.or.connect.diexam01;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Car</span> </span>&#123;</span><br><span class="line">  <span class="meta">@Autowired</span></span><br><span class="line">  <span class="keyword">private</span> Engine v8;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="title">Car</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;Car 생성자&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;엔진을 이용하여 달립니다.&quot;</span>);</span><br><span class="line">    v8.exec();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>DI 확인</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> kr.or.connect.diexam01;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.context.ApplicationContext;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.AnnotationConfigApplicationContext;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ApplicationContextExam04</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    ApplicationContext ac = <span class="keyword">new</span> AnnotationConfigApplicationContext(ApplicationConfig2.class);</span><br><span class="line"></span><br><span class="line">    Car car = ac.getBean(Car.class);</span><br><span class="line">    car.run();</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> Spring </tag>
            
            <tag> Dependency Injection </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>200903 TIL</title>
      <link href="/2020/09/03/200903-TIL/"/>
      <url>/2020/09/03/200903-TIL/</url>
      
        <content type="html"><![CDATA[<h2 id="Testing"><a href="#Testing" class="headerlink" title="Testing"></a>Testing</h2><p><strong>테스팅</strong>이란 응용 프로그램 또는 시스템(구성요소)의 동작과 성능, 안정성이 요구 하는 수준을 만족하는지 확인하기 위해 결함을 발견하는 과정이라고 할 수 있다.</p><ul><li>정적 테스트: 프로그램을 개발하기 전에 요구사항 등을 리뷰 하는 것</li><li>동적 테스트: 프로그램 개발 이후에 실제 실행하면서 테스트 하는 것</li></ul><h2 id="소프트웨어-개발-유지보수-운영-시-테스팅의-역할"><a href="#소프트웨어-개발-유지보수-운영-시-테스팅의-역할" class="headerlink" title="소프트웨어 개발, 유지보수, 운영 시 테스팅의 역할"></a>소프트웨어 개발, 유지보수, 운영 시 테스팅의 역할</h2><ol><li>Testing을 통해 release 전에 발견 되지 않은 결함들이 수정된다면, 운영 환경 내에서 발생하는 risk를 줄이는데 기여 할 수 있으며 소프트웨어 품질에 도움을 준다.</li><li>Testing은 개발 초기의 요구사항 분석 단계 부터 review 및 insfection을 통해 정적으로 이뤄질 수 있으며 각각의 개발 단계에 대응하는 test level에 따른 testing이 이루어진다.</li><li>기존에 운영되는 소프트웨어 시스템이 유지 보수 활동으로 변경 및 단종되거나 환경이 변하는 경우, 변경된 소스트웨어에 대한 testing과 변경된 환경에서 운영 testing이 요구된다.</li><li>소프트웨어 testing은 계약상(법적) 요구조건들, 또는 산업에 특화된 표준들을 만족 시키기 위해서 필요하다.</li></ol><h2 id="Testing의-일반적인-원리"><a href="#Testing의-일반적인-원리" class="headerlink" title="Testing의 일반적인 원리"></a>Testing의 일반적인 원리</h2><ol><li><p>Testing이 결함이 존재함을 밝히는 활동이다.<br>Testing은 결함이 존재함을 드러내지만, 결함이 없다는 것을 증명할 수 없다.<br>즉, 프로그램이 완벽하다고 증명할 수 없다.<br>이는 Test한 부분까지만 잘 동작한다고 말할 수 있고 테스트를 하지 않은 부분은 결함이 있는지 없는지 예측할 수 없다.</p></li><li><p>Exhaustive Testing은 불가능 하다.</p><p>모든 가능성(입력과 사전 조건의 모든 조합)을 Testing 하는 것은 지극히 간단한 소프트웨어를 제외하고 가능하지 않다.</p><ul><li>한 프로그램 내의 내부 조건이 무수히 많음</li><li>입력이 가질 수 있는 보든 값의 조건이 무수히 많음</li><li>GUI이벤트 발생 순서에 대한 조합도 무수히 많음</li></ul><p>완벽한 Testing 대신, 리스크 분석과 결정된 우선순위에 따라 Testing 활동 노력을 집중 시켜야 한다. (Risk-based testing)<br>완벽한 Testing은 우주항공, 의료 등 안전이 최우선(Safety critical)인 소프트웨어를 개발 할 때 고려 할 수 있으나 실제로 완벽한 것은 아니고 강력한 Testing으로 볼 수 있다.</p></li></ol><h2 id="Test-Driven-Development"><a href="#Test-Driven-Development" class="headerlink" title="Test Driven Development"></a>Test Driven Development</h2><ul><li>새로 추가 되는 기능에 해당하는 Test를 먼저 작성, 이때 각 test는 간결 해야함</li><li>테스트를 수행하고 새 테스트가 실패하는지 확인한다.<ul><li>새 테스트는 항상 실패해야만 테스트가 잘 작성됐다고 할 수 있다.</li></ul></li><li>코드를 작성</li><li>테스트 수행</li><li>코드의 refactor</li><li>반복</li></ul>]]></content>
      
      
      <categories>
          
          <category> TIL </category>
          
          <category> Testing </category>
          
      </categories>
      
      
        <tags>
            
            <tag> TIL </tag>
            
            <tag> Testing </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java DAO &amp; DTO</title>
      <link href="/2020/09/02/Java-DAO-DTO/"/>
      <url>/2020/09/02/Java-DAO-DTO/</url>
      
        <content type="html"><![CDATA[<h2 id="DAO-Data-Access-Object"><a href="#DAO-Data-Access-Object" class="headerlink" title="DAO(Data Access Object)"></a>DAO(Data Access Object)</h2><ul><li>실제로 DB에 접근 하는 객체<ul><li>Persistance Layer(DB에 data를 CRUD하는 계층) 이다.</li></ul></li><li>Service와 DB를 연결하는 고리의 역할을 한다.</li><li>SQL를 사용(개발자가 직접 코딩)하여 DB에 접근한 후 적절한 CRUD API를 제공한다.</li></ul><h2 id="DTO-Data-Transfer-Object"><a href="#DTO-Data-Transfer-Object" class="headerlink" title="DTO(Data Transfer Object)"></a>DTO(Data Transfer Object)</h2><ul><li>계층간 데이터 교환을 위한 객체(Java Beans)이다.<ul><li>DB에서 데이터를 얻어 Service나 Controller 등으로 보낼 때 사용하는 객체를 말한다.</li><li>DB의 데이터가 Presentiation Logic Tier로 넘어오게 될 때 DTO의 구조로 바뀌게 된다.</li><li>Logic을 갖지 않는 순수한 데이터 객체, getter/setter method만을 갖는다.</li><li>DB에서 꺼낸 값을 변경할 필요가 없기 때문에 DTO class에는 setter가 없다.</li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
          <category> Design Pattern </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> Data Access Object </tag>
            
            <tag> Data Transfer Object </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>200901 TIL</title>
      <link href="/2020/09/01/200901-TIL/"/>
      <url>/2020/09/01/200901-TIL/</url>
      
        <content type="html"><![CDATA[<h2 id="Spring-Framework"><a href="#Spring-Framework" class="headerlink" title="Spring Framework"></a>Spring Framework</h2><ul><li>복잡한 부분은 구현이 거의 되어 있고, 필요한 부분 입맛에 맞게 구현 할 수 있다.</li><li>엔터프라이즈급 어플리케이션을 구축할 수 있는 가벼운 솔루션이자, One-Stop-Shop(모든 과정을 한번에 해결 할 수 있다.)</li><li>원하는 부분만 가져다 사용할 수 있도록 모듈화가 잘 되어 있다.</li><li>IoC container</li><li>선언적으로 트렌적션을 관리할 수 있다.</li><li>완전한 기능을 갖춘 MVC Framework을 제공</li><li>AOP 지원</li><li>Spring은 Domain 논리 코드와 쉽게 분리될 수 있는 구조로 되어 있습니다.</li></ul><h2 id="Container"><a href="#Container" class="headerlink" title="Container"></a>Container</h2><ul><li>Container는 instance의 생명주기를 관리한다.</li><li>생성된 instance들에게 추가적인 기능을 제공한다.</li><li>Servlet class instance 화 하는 것을 tomcat이 대신 해준다.</li><li>WAS(tomcat)은 Servlet conatainer를 가지고, Servlet URL을 받으면 Servlet을 메모리에 올린 후 실행해준다.</li><li>Container는 보통 instance의 생명주기를 관리하며, 생성된 instance들에게 추가적인 기능을 제공하는 것을 말합니다.</li></ul><h2 id="Inversion-of-Control"><a href="#Inversion-of-Control" class="headerlink" title="Inversion of Control"></a>Inversion of Control</h2><ul><li>개발자는 프로그램의 흐름을 제어하는 코드를 작성한다. 그런데, 이 흐름의 제어를 개발자가 하는 것이 아니라 다른 프로그램이 그 흐름을 제허하는 것을 IoC라 말한다.</li><li>Servlet class는 개발자가 만들지만, 그 Servlet의 method를 알맞게 호출 하는것은 WAS</li><li>개발자가 만든 어떤 class나 method를 다른 프로그램이 대신 실행하주는 것을 제어의 역전이라 한다.</li></ul><h2 id="Dependency-Injection"><a href="#Dependency-Injection" class="headerlink" title="Dependency Injection"></a>Dependency Injection</h2><ul><li>DI는 class사이의 의존관계를 Bean설정 정보를 바탕으로 컨테이너가 자동으로 연결해주는 것을 말한다.</li><li>DI가 적용 안된경우:<ul><li>개발자가 직접 인스턴스를 생성한다</li></ul></li><li>Spring에서 DI 가 적용 된 경우, container가 instance를 할당해 준다.<ul><li>Inversion of control</li></ul></li></ul><h2 id="Spring에서-제공하는-IoC-DI-container"><a href="#Spring에서-제공하는-IoC-DI-container" class="headerlink" title="Spring에서 제공하는 IoC/DI container"></a>Spring에서 제공하는 IoC/DI container</h2><ul><li>BeanFactory: IoC/DI에 대한 기본 기능을 가지고 있다.</li><li>ApplicationContext: BeanFactory의 모든 기능을 포함하고 개선된 버전<ul><li>BeanPostProcessor: 컨테이너의 기본로직을 오버라이딩하여 인스턴스화와 의존성 처리 로직 등을 개발자가 원하는 대로 구현 할 수 있도록 합니다.</li><li>BeanFactoryPostProcessor: 설정된 메타 데이터를 커스터마이징 할 수 있습니다.</li></ul></li></ul><h2 id="Bean-class"><a href="#Bean-class" class="headerlink" title="Bean class"></a>Bean class</h2><ul><li>스프링에서는 객체를 다룰때 Single tone pattern을 이용한다.</li><li>예전에는 Visual한 컴포넌트를 Bean이라고 불렀지만, 근래 들어서는 일반적인 Java 클래스를 Bean클래스라고 보통 부른다.</li><li>Bean class의 3가지 특징<ul><li>기본 생성자를 가진다.</li><li>field는 private하게 선언한다.</li><li>getter, setter메소드를 가진다.</li><li>getName(), setName() 메소드를 name property라 한다.</li></ul></li><li>xml을 이용한 설정</li><li>Java Config를 이용한 설정<ul><li><code>@Configuration</code><ul><li>스프링 설정 클래스를 선언하는 annotation</li></ul></li><li><code>@Bean</code><ul><li>bean을 정의하는 annotation</li></ul></li><li><code>@Component</code><ul><li>component 스캔의 대상이 되는 annotation 중 하나로써 주로 유틸, 기타 지원 클래스에 붙이는 annotation</li></ul></li><li><code>@Autowired</code><ul><li>주입 대상이 되는 bean을 컨테이너에 찾아 주입하는 annotation</li></ul></li></ul></li><li>Sprint에서 사용하기에 알맞게 @Controller, @Service, @Repository, @Component annotation이 붙어 있는 객체들은 ComponentScan을 이용해서 읽어들여 메모리에 올리고 DI를 주입하도록 하고, 이러한 annotation이 붙어 있지 않은 객체는 @Bean annotation을 이용하여 직접 생성해주는 방식으로 클래스들을 관리하면 편리하다.</li></ul>]]></content>
      
      
      <categories>
          
          <category> TIL </category>
          
          <category> Spring </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spring </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>200831 TIL</title>
      <link href="/2020/08/31/200831-TIL/"/>
      <url>/2020/08/31/200831-TIL/</url>
      
        <content type="html"><![CDATA[<h2 id="JSTL"><a href="#JSTL" class="headerlink" title="JSTL"></a>JSTL</h2><ul><li>JSTL(JSP Standard Tag Library)은 JSP page에서 조건문 처리, 반복문 처리 등을 html tag 형태로 작성할 수 있게 도와준다.</li></ul><h3 id="set-remove"><a href="#set-remove" class="headerlink" title="set, remove"></a>set, remove</h3><ul><li><p>set</p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;c:set <span class="keyword">var</span>=<span class="string">&quot;varName&quot;</span> scope=<span class="string">&quot;session&quot;</span> value=<span class="string">&quot;someValue&quot;</span>/&gt;</span><br></pre></td></tr></table></figure><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;c:set <span class="keyword">var</span>=<span class="string">&quot;varName&quot;</span> scope=<span class="string">&quot;request&quot;</span>&gt;</span><br><span class="line">someValue</span><br><span class="line">&lt;/c:set&gt;</span><br></pre></td></tr></table></figure></li><li><p>remove</p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;c:remove <span class="keyword">var</span>=<span class="string">&quot;varName&quot;</span> scope=<span class="string">&quot;request&quot;</span>/&gt;</span><br></pre></td></tr></table></figure></li></ul><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ page language=<span class="string">&quot;java&quot;</span> contentType=<span class="string">&quot;text/html; charset=UTF-8&quot;</span></span><br><span class="line">  pageEncoding=<span class="string">&quot;UTF-8&quot;</span>%&gt;</span><br><span class="line">&lt;%@ taglib prefix=<span class="string">&quot;c&quot;</span> uri=<span class="string">&quot;http://java.sun.com/jsp/jstl/core&quot;</span>%&gt;</span><br><span class="line">&lt;c:set <span class="keyword">var</span>=<span class="string">&quot;value1&quot;</span> scope=<span class="string">&quot;request&quot;</span> value=<span class="string">&quot;kim&quot;</span>/&gt;</span><br><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;meta charset=<span class="string">&quot;UTF-8&quot;</span>&gt;</span><br><span class="line">&lt;title&gt;Insert title here&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">  성: $&#123;value1 &#125;&lt;br&gt;</span><br><span class="line">  &lt;c:remove <span class="keyword">var</span>=<span class="string">&quot;value1&quot;</span> scope=<span class="string">&quot;request&quot;</span>/&gt;</span><br><span class="line">  성: $&#123;value1 &#125;&lt;br&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><h3 id="Property-Map"><a href="#Property-Map" class="headerlink" title="Property, Map"></a>Property, Map</h3>  <figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;c:set target=<span class="string">&quot;$&#123;some&#125;&quot;</span> property=<span class="string">&quot;propertyName&quot;</span> value=<span class="string">&quot;anyValue&quot;</span>/&gt;</span><br></pre></td></tr></table></figure><ul><li>some 객체가 Java bin일 경우</li><li>some 객체가 map일 경우: some.put(propertyName, anyValue);</li></ul><h3 id="if"><a href="#if" class="headerlink" title="if"></a>if</h3><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;c:<span class="keyword">if</span> test=<span class="string">&quot;조건&quot;</span>&gt;</span><br><span class="line">...</span><br><span class="line">...</span><br><span class="line">&lt;/c:if&gt;</span><br></pre></td></tr></table></figure><h3 id="choose"><a href="#choose" class="headerlink" title="choose"></a>choose</h3><ul><li><code>if</code> - <code>else</code> 혹은 <code>switch</code> <code>case</code> statement 처럼 조건에 맞게 사용 될 수 있다.</li></ul><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&lt;c:choose&gt;</span><br><span class="line">  &lt;c:when test=<span class="string">&quot;$&#123;score &gt;= 90&#125;&quot;</span>&gt;</span><br><span class="line">    A학점 입니다.</span><br><span class="line">  &lt;/c:when&gt;</span><br><span class="line">  &lt;c:when test=<span class="string">&quot;$&#123;score &gt;=80 &#125;&quot;</span>&gt;</span><br><span class="line">      B학점입니다.</span><br><span class="line">    &lt;/c:when&gt;</span><br><span class="line">    &lt;c:when test=<span class="string">&quot;$&#123;score &gt;=70 &#125;&quot;</span>&gt;</span><br><span class="line">      C학점입니다.</span><br><span class="line">    &lt;/c:when&gt;</span><br><span class="line">    &lt;c:when test=<span class="string">&quot;$&#123;score &gt;=60 &#125;&quot;</span>&gt;</span><br><span class="line">      D학점입니다.</span><br><span class="line">    &lt;/c:when&gt;</span><br><span class="line">    &lt;c:otherwise&gt;</span><br><span class="line">      F학점 입니다.</span><br><span class="line">    &lt;/c:otherwise&gt;</span><br><span class="line">&lt;/c:choose&gt;</span><br></pre></td></tr></table></figure><h3 id="forEach"><a href="#forEach" class="headerlink" title="forEach"></a>forEach</h3><ul><li>배열 및 Collection에 저장된 요소를 차례대로 처리한다.</li></ul><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;c:forEach <span class="keyword">var</span>=<span class="string">&quot;변수&quot;</span> items=<span class="string">&quot;아이템&quot;</span> [begin=<span class="string">&quot;시작번호&quot;</span>] [end=<span class="string">&quot;끝번호&quot;</span>]&gt;</span><br></pre></td></tr></table></figure><h3 id="import"><a href="#import" class="headerlink" title="import"></a>import</h3><ul><li>지정한 URL에 연결하여 결과를 지정한 변수에 저장한다.</li></ul><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;c:<span class="keyword">import</span> url=<span class="string">&quot;URL&quot;</span> charEncoding=<span class="string">&quot;캐릭터 인코딩&quot;</span> <span class="keyword">var</span>=<span class="string">&quot;변수명&quot;</span> scope=<span class="string">&quot;scope&quot;</span>&gt;</span><br><span class="line">  &lt;c:param name=<span class="string">&quot;파라미터 이름&quot;</span>, value=<span class="string">&quot;파라미터값&quot;</span>/&gt;</span><br><span class="line">&lt;/c:import&gt;</span><br></pre></td></tr></table></figure><ul><li>url: 결과를 읽어올 URL</li><li>charEncoding: 읽어온 결과를 저장할 때 사용할 character encoding</li><li>var: 읽어온 결과를 저장할 영역</li><li>scope: 변수를 저장할 영역</li><li>&lt;c:param&gt; 태그는 url 속성에 지정한 사이트에 연결할 때 전송할 파라미터를 입력한다.</li></ul><h3 id="redirect"><a href="#redirect" class="headerlink" title="redirect"></a>redirect</h3><p><code>response.sendRedirect()</code> 와 비슷</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;c:redirect url=<span class="string">&quot;리다이렉트할URL&quot;</span>&gt;</span><br><span class="line">  &lt;c:param name=<span class="string">&quot;파라미터이름&quot;</span> value=<span class="string">&quot;파라미터값&quot;</span>/&gt;</span><br><span class="line">&lt;/c:redirect&gt;</span><br></pre></td></tr></table></figure><ul><li>url: 리다이렉트 URL</li><li>&lt;c:param&gt;은 리다이렉트 할 페이지에 전달할 파라미터 지정</li></ul><h3 id="out"><a href="#out" class="headerlink" title="out"></a>out</h3><ul><li>JspWriter에 데이터를 출력한다</li></ul><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;c:out value=<span class="string">&quot;value&quot;</span> escapeXml=<span class="string">&quot;&#123;true|false&#125;&quot;</span> <span class="keyword">default</span>=<span class="string">&quot;defaultValue&quot;</span> /&gt;</span><br></pre></td></tr></table></figure><ul><li>excapeXml 값이 true 일경우 아래와 같이 문자를 변경한다. 생략할 수 있으며, 생략할 경우 기본 값은 true이다.</li></ul><table><thead><tr><th align="left">문자</th><th align="left">변환된 형태</th></tr></thead><tbody><tr><td align="left"><code>&lt;</code></td><td align="left"><code>&amp;lt;</code></td></tr><tr><td align="left"><code>&gt;</code></td><td align="left"><code>&amp;gt;</code></td></tr><tr><td align="left"><code>&amp;</code></td><td align="left"><code>&amp;amp;</code></td></tr><tr><td align="left"><code>&#39;</code></td><td align="left"><code>&amp;#039;</code></td></tr><tr><td align="left"><code>&quot;</code></td><td align="left"><code>&amp;#034;</code></td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> TIL </category>
          
          <category> JSTL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JSTL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>200830 TIL</title>
      <link href="/2020/08/30/200830-TIL/"/>
      <url>/2020/08/30/200830-TIL/</url>
      
        <content type="html"><![CDATA[<h2 id="Expression-Language"><a href="#Expression-Language" class="headerlink" title="Expression Language"></a>Expression Language</h2><ul><li><p>표현 언어가 제공하는 기능</p><ul><li>JSP의 scope에 맞는 속성 사용</li><li>집합 객체에 대한 접근 방법 제공</li><li>수치 연산, 관계 연산, 논리 연산자 제공</li><li>Java class method 호출 기능 제공</li><li>표현 언어만의 기본 객체 제공</li><li>Java 코드보다 조금 깔끔하게 JSP 파일을 작성 할 수 있다.</li></ul></li><li><p>표현언어의 표현 방법</p><ul><li>${expr}</li><li>example</li></ul><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;jsp:include page=<span class="string">&quot;/module/$&#123;skin.id&#125;/header.jsp&quot;</span> flush=<span class="string">&quot;true&quot;</span>/&gt;</span><br><span class="line">&lt;b&gt;$&#123;sessionScope.member.id&#125;&lt;/b&gt;님 환영합니다.</span><br></pre></td></tr></table></figure></li></ul><h3 id="표현-언어의-데이터-타입"><a href="#표현-언어의-데이터-타입" class="headerlink" title="표현 언어의 데이터 타입"></a>표현 언어의 데이터 타입</h3><ul><li>boolean type: true, false</li><li>integer type: 0-9</li><li>floating point type</li><li>string type: 따옴포 (‘ or “)로 둘러싼 문자열<ul><li>작은 따옴표를 사용해서 표현할 경우 값에 표현된 작은 따옴표는 &#39;와 같이 \기호와 함께 사용해야 한다.</li><li>\ 기호 자체는 \ \로 표시한다.</li></ul></li><li>null type: null</li></ul><h4 id="객체-접근-규칙"><a href="#객체-접근-규칙" class="headerlink" title="객체 접근 규칙"></a>객체 접근 규칙</h4>  <figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$&#123;&lt;expr1&gt;.&lt;expr2&gt;&#125;</span><br></pre></td></tr></table></figure><ul><li>expr1이 expr2가 null이면 null을 반환한다.</li><li>expr1이 Map일 경우 expr2를 key로한 값을 반환한다.</li><li>expr1이 List나 Array이면, expr2가 정수일 경우 해당 정수번째 index에 해당하는 값을 반환한다.<ul><li>만약 정수가 아닐 경우 오류가 발생한다.</li></ul></li><li>expr1이 객체일 경우는 expr2에 해당하는 getter method에 해당하는 method를 호출한 결과를 반환한다.</li></ul><h3 id="수치-연산자"><a href="#수치-연산자" class="headerlink" title="수치 연산자"></a>수치 연산자</h3><ul><li><code>+</code>, <code>-</code>, <code>*</code>, <code>/</code> or <code>div</code></li><li>숫자가 아닌 객체와 수치 연산자를 사용할 경우 객체를 숫자 값으로 변환 후 연산자를 수행 : ${“10”+1} → ${10+1}</li><li>숫자로 변환할 수 없는 객체와 수치 연산자를 함께 사용하면 에러를 발생 : ${“열”+1} → 에러</li><li>수치 연산자에서 사용되는 객체가 null이면 0으로 처리 : ${null + 1} → ${0+1}</li></ul><h3 id="비교-연산자"><a href="#비교-연산자" class="headerlink" title="비교 연산자"></a>비교 연산자</h3><ul><li><code>==</code> 또는 <code>eq</code></li><li><code>!=</code> 또는 <code>ne</code></li><li><code>&lt;</code> 또는 <code>lt</code></li><li><code>&gt;</code> 또는 <code>gt</code></li><li><code>&lt;=</code> 또는 <code>le</code></li><li><code>&gt;=</code> 또는 <code>ge</code></li><li>문자열 비교: <code>$&#123;str == &#39;값&#39;&#125;</code> <code>str.compareTo(&quot;값&quot;) == 0</code> 과 동일</li></ul><h3 id="논리-연산자"><a href="#논리-연산자" class="headerlink" title="논리 연산자"></a>논리 연산자</h3><ul><li><code>&amp;&amp;</code> 또는 <code>and</code></li><li><code>||</code> 또는 <code>or</code></li><li><code>!</code> 또는 <code>not</code></li></ul><h3 id="표현-언어-비활성화"><a href="#표현-언어-비활성화" class="headerlink" title="표현 언어 비활성화"></a>표현 언어 비활성화</h3><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ page isELIgnored = <span class="string">&quot;true&quot;</span> %&gt;</span><br></pre></td></tr></table></figure><h3 id="empty-연산자"><a href="#empty-연산자" class="headerlink" title="empty 연산자"></a><code>empty</code> 연산자</h3><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">empty&lt;value&gt;</span><br></pre></td></tr></table></figure><ul><li>값이 비어 있거나 zero 값인 경우 <code>true</code>를 리턴 그외의 경우 <code>false</code>를 리턴</li></ul><h3 id="비교-선택-연산자"><a href="#비교-선택-연산자" class="headerlink" title="비교 선택 연산자"></a>비교 선택 연산자</h3><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;expr&gt; ? &lt;value1&gt; : &lt;value2&gt;</span><br><span class="line"></span><br><span class="line">- `&lt;expr&gt;`의 값이 `<span class="keyword">true</span>`이면 value1을 리턴하고, `<span class="keyword">false</span>`이면 value2를 리턴</span><br></pre></td></tr></table></figure><h3 id="Scope별-EL의-사용"><a href="#Scope별-EL의-사용" class="headerlink" title="Scope별 EL의 사용"></a>Scope별 EL의 사용</h3><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ page language=<span class="string">&quot;java&quot;</span> contentType=<span class="string">&quot;text/html; charset=UTF-8&quot;</span></span><br><span class="line">    pageEncoding=<span class="string">&quot;UTF-8&quot;</span>%&gt;</span><br><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;%</span><br><span class="line">  pageContext.setAttribute(<span class="string">&quot;p1&quot;</span>, <span class="string">&quot;page scope value&quot;</span>);</span><br><span class="line">  request.setAttribute(<span class="string">&quot;r1&quot;</span>, <span class="string">&quot;request scope value&quot;</span>);</span><br><span class="line">  session.setAttribute(<span class="string">&quot;s1&quot;</span>, <span class="string">&quot;session scope value&quot;</span>);</span><br><span class="line">  application.setAttribute(<span class="string">&quot;a1&quot;</span>, <span class="string">&quot;application scope value&quot;</span>);</span><br><span class="line">%&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;meta charset=<span class="string">&quot;UTF-8&quot;</span>&gt;</span><br><span class="line">&lt;title&gt;Insert title here&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">pageContext.getAttribute(<span class="string">&quot;p1&quot;</span>) : &lt;%=pageContext.getAttribute(<span class="string">&quot;p1&quot;</span>) %&gt;</span><br><span class="line">pageContext.getAttribute(<span class="string">&quot;p1&quot;</span>) : $&#123;pageScope.p1&#125;&lt;br&gt;</span><br><span class="line">request.getAttribute(<span class="string">&quot;r1&quot;</span>) : $&#123;requestScope.r1&#125;&lt;br&gt;</span><br><span class="line">session.getAttribute(<span class="string">&quot;s1&quot;</span>) : $&#123;sessionScope.s1&#125;&lt;br&gt;</span><br><span class="line">application.getAttribute(<span class="string">&quot;a1&quot;</span>) : $&#123;applicationScope.a1&#125;&lt;br&gt;</span><br><span class="line">&lt;br&gt;&lt;br&gt;</span><br><span class="line">pageContext.getAttribute(<span class="string">&quot;p1&quot;</span>): $&#123;p1&#125;&lt;br&gt;</span><br><span class="line">request.getAttribute(<span class="string">&quot;r1&quot;</span>): $&#123;r1&#125;&lt;br&gt;</span><br><span class="line">session.getAttribute(<span class="string">&quot;s1&quot;</span>): $&#123;s1&#125;&lt;br&gt;</span><br><span class="line">application.getAttribute(<span class="string">&quot;a1&quot;</span>): $&#123;a1&#125;&lt;br&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><h3 id="EL-연산"><a href="#EL-연산" class="headerlink" title="EL 연산"></a>EL 연산</h3><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ page language=<span class="string">&quot;java&quot;</span> contentType=<span class="string">&quot;text/html; charset=UTF-8&quot;</span></span><br><span class="line">  pageEncoding=<span class="string">&quot;UTF-8&quot;</span>%&gt;</span><br><span class="line">&lt;%</span><br><span class="line">  request.setAttribute(<span class="string">&quot;k&quot;</span>, <span class="number">10</span>);</span><br><span class="line">  request.setAttribute(<span class="string">&quot;m&quot;</span>, <span class="keyword">true</span>);</span><br><span class="line">%&gt;</span><br><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;meta charset=<span class="string">&quot;UTF-8&quot;</span>&gt;</span><br><span class="line">&lt;title&gt;Insert title here&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">k: $&#123;k &#125;&lt;br&gt;</span><br><span class="line">k + <span class="number">5</span>: $&#123; k + <span class="number">5</span> &#125;&lt;br&gt;</span><br><span class="line">k - <span class="number">5</span>: $&#123; k - <span class="number">5</span> &#125;&lt;br&gt;</span><br><span class="line">k * <span class="number">5</span>: $&#123; k * <span class="number">5</span> &#125;&lt;br&gt;</span><br><span class="line">k / <span class="number">5</span>: $&#123; k div <span class="number">5</span> &#125;&lt;br&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">k: $&#123;k &#125;&lt;br&gt;</span><br><span class="line">m: $&#123;m &#125;&lt;br&gt;</span><br><span class="line"></span><br><span class="line">k &gt; <span class="number">5</span>: $&#123; k &gt; <span class="number">5</span> &#125;&lt;br&gt;</span><br><span class="line">k &lt; <span class="number">5</span>: $&#123; k &lt; <span class="number">5</span> &#125;&lt;br&gt;</span><br><span class="line">k &lt;= <span class="number">10</span>: $&#123;k &lt;= <span class="number">10</span> &#125;&lt;br&gt;</span><br><span class="line">k &gt;= <span class="number">10</span>: $&#123;k &gt;= <span class="number">10</span> &#125;&lt;br&gt;</span><br><span class="line">m: $&#123;m &#125;&lt;br&gt;</span><br><span class="line">!m: $&#123;!m &#125;&lt;br&gt;</span><br><span class="line"></span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> TIL </category>
          
          <category> EL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Expression Language </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>200829 TIL</title>
      <link href="/2020/08/29/200829-TIL/"/>
      <url>/2020/08/29/200829-TIL/</url>
      
        <content type="html"><![CDATA[<h2 id="JSP-Syntax"><a href="#JSP-Syntax" class="headerlink" title="JSP Syntax"></a>JSP Syntax</h2><ul><li>Declaration – &lt;%! %&gt;: 전역변수 선언 및 메소드 선언에 사용</li><li>Scriptlet – &lt;% %&gt;: 프로그래밍 코드 기술에 사용</li><li>Expression – &lt;%=%&gt;: 화면에 출력할 내용 기술에 사용</li></ul><h3 id="Declaration-선언문"><a href="#Declaration-선언문" class="headerlink" title="Declaration (선언문)"></a>Declaration (선언문)</h3><ul><li>&lt;%! %&gt;</li><li>JSP 내에서 변수 및 메소드 선언</li></ul><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;%!</span><br><span class="line">  String id = <span class="string">&quot;u001&quot;</span>; <span class="comment">// 멤버변수 선언</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> String <span class="title">getId</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> id;</span><br><span class="line">  &#125;</span><br><span class="line">%&gt;</span><br></pre></td></tr></table></figure><h3 id="Scriptlet"><a href="#Scriptlet" class="headerlink" title="Scriptlet"></a>Scriptlet</h3><ul><li>&lt;% %&gt;</li><li>가장 일반적으로 많이 쓰이는 스크립트 요소</li><li>주로 프로그램이의 로직을 기술할 때 사용.</li><li>스크립트릿에서 선언된 변수는 지역변수</li></ul><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ page language=<span class="string">&quot;java&quot;</span> contentType=<span class="string">&quot;text/html; charset=UTF-8&quot;</span></span><br><span class="line">    pageEncoding=<span class="string">&quot;UTF-8&quot;</span>%&gt;</span><br><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;meta charset=<span class="string">&quot;UTF-8&quot;</span>&gt;</span><br><span class="line">&lt;title&gt;Insert title here&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;%</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">5</span>; i++) &#123;</span><br><span class="line">%&gt;</span><br><span class="line">&lt;h&lt;%=i %&gt;&gt;아름다운 한글 &lt;/h&lt;%=i %&gt;&gt;</span><br><span class="line">&lt;%</span><br><span class="line">  &#125;</span><br><span class="line">%&gt;</span><br><span class="line"></span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><h3 id="Comment"><a href="#Comment" class="headerlink" title="Comment"></a>Comment</h3><ul><li>JSP에서 사용할 수 있는 주석<ul><li>HTML 주석, JAVA 주석, JSP 주석</li></ul></li><li>HTML 주석 <!--  --> browser에서는 안보인다.</li><li>JSP 주석 &lt;%– –%&gt;<ul><li>JSP 주석은 해당 페이지를, web browser를 통해 출력 결과로서 표시하거나, 웹 브라우저 상에서<br>소스 보기를 해도 표시 되지 않음, 또한 JSP주석 내에 실행 코드를 넣어도 그 코드는 실행되지 않는다.</li></ul></li><li>JAVA 주석<ul><li>//, /* */ 변환은 되는데 servlet에서 실행될때 안된다.</li></ul></li><li>Comment example code</li></ul><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ page language=<span class="string">&quot;java&quot;</span> contentType=<span class="string">&quot;text/html; charset=UTF-8&quot;</span></span><br><span class="line">    pageEncoding=<span class="string">&quot;UTF-8&quot;</span>%&gt;</span><br><span class="line">&lt;!DOCTYPE html PUBLIC <span class="string">&quot;-//W3C//DTD HTML 4.01 Transitional//EN&quot;</span> <span class="string">&quot;http://www.w3.org/TR/html4/loose.dtd&quot;</span>&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;meta http-equiv=<span class="string">&quot;Content-Type&quot;</span> content=<span class="string">&quot;text/html; charset=UTF-8&quot;</span>&gt;</span><br><span class="line">&lt;title&gt;Insert title here&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;%--jsp 주석문입니다.</span><br><span class="line">여러줄을 입력할 수 있습니다. --%&gt;</span><br><span class="line">&lt;!-- html 주석문입니다. --&gt;</span><br><span class="line">&lt;%</span><br><span class="line">  <span class="comment">/*</span></span><br><span class="line"><span class="comment">  자바 여러줄 주석문입니다.</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">5</span>; i++) &#123; <span class="comment">// java 한줄 주석문입니다.</span></span><br><span class="line">%&gt;</span><br><span class="line">  &lt;H&lt;%=i %&gt;&gt; 아름다운 한글 &lt;/H&lt;%=i %&gt;&gt;</span><br><span class="line">&lt;%</span><br><span class="line">&#125;</span><br><span class="line">%&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><h4 id="JSP-내장-객체"><a href="#JSP-내장-객체" class="headerlink" title="JSP 내장 객체"></a>JSP 내장 객체</h4><ul><li>JSP를 실행하면 서블릿 소스가 생성되고 실행된다.</li><li>JSP에 입력한 대부분의 코드는 생성되는 Servlet source의 _jspService() method 안에 삽입 되는 코드로 생성된다.</li><li>_jspService()에 삽입된 코드의 윗부분에 미리 선언된 객체들이 있는데, 해당 객체들은 jsp에서도 사용 가능하다.</li><li>response, request, application, session, out과 같은 변수를 내장객체라고 한다.</li><li>미리 선언이 되어 있으므로 바로 가져다가 쓸 수 있다.</li></ul><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ page language=<span class="string">&quot;java&quot;</span> contentType=<span class="string">&quot;text/html; charset=UTF-8&quot;</span></span><br><span class="line">    pageEncoding=<span class="string">&quot;UTF-8&quot;</span>%&gt;</span><br><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;meta charset=<span class="string">&quot;UTF-8&quot;</span>&gt;</span><br><span class="line">&lt;title&gt;Insert title here&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;%</span><br><span class="line">  StringBuffer url = request.getRequestURL();</span><br><span class="line">  out.print(<span class="string">&quot;url: &quot;</span> + url.toString());</span><br><span class="line">  out.print(<span class="string">&quot;&lt;br&gt;&quot;</span>);</span><br><span class="line">%&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><h2 id="Scope"><a href="#Scope" class="headerlink" title="Scope"></a>Scope</h2><ul><li>Application: Web Application이 시작되고 종료될 때까지 변수가 유지되는 경우 사용</li><li>Session: Web Browser 별로 변수가 관리되는 경우 사용</li><li>Request: http요청을 WAS가 받아서 Web Browser에게 응답할 때까지 변수가 유지되는 경우 사용</li><li>Page: 페이지 내에서 지역변수처럼 사용, 가장 작은 단위</li></ul><h3 id="Page-Scope"><a href="#Page-Scope" class="headerlink" title="Page Scope"></a>Page Scope</h3><ul><li>PageContext 추상 클래스를 사용한다</li><li>JSP 페이지에서 pageContext라는 내장 객체로 사용 가능 하다.</li><li>forwar가 될 경우 해당 Page scope에 지정된 변수는 사용할 수 없다.</li><li>사용방법은 Application scope나 Session scope, request scope와 같다.</li><li>지역 변수 처럼 사용된다는 것이 다른 Scope들과 다르다.</li><li>jsp에서 pageScope에 값을 저장 한 후 해당 값을 EL표기법등에서 사용할 때 사용됩니다.<br>지역 변수 처럼 해당 jsp나 서블릿이 실행되는 동안에만 정보를 유지하고자 할 때 사용됩니다.</li></ul><h3 id="Request-Scope"><a href="#Request-Scope" class="headerlink" title="Request Scope"></a>Request Scope</h3><ul><li>http요청을 WAS가 받아서 Web browser에게 응답할 때까지 변수 값을 유지하고자 할 경우 사용 된다.</li><li>HttpServletRequest 객체를 사용한다.</li><li>JSP에서는 request내장 변수를 사용한다.</li><li>Servlet에서는 HttpServletRequest객체를 사용한다.</li><li>값을 저장할 때는 request객체의 setAttribute() 메소드를 사용한다.</li><li>값을 읽어들일 때는 request객체의 getAttribute() 메소드를 사용한다.</li><li>forward시 값을 유지하고자 사용한다.<ul><li>forward 하기 전에 request 객체의 setAttribute() 메소드로 값을 설정한 후, Servlet이나 jsp에게 결과를 전달하여 값을 출력하도록 하였슨데 이렇게 forward 되는 동안 값이 유지되는 것이 Request scope를 이용했다고 한다.</li></ul></li></ul><h3 id="Session-Scope"><a href="#Session-Scope" class="headerlink" title="Session Scope"></a>Session Scope</h3><ul><li>Web browser 별로 변수를 관리하고자 할 경우 사용한다.</li><li>Web browser간의 탭 간에는 세션정보가 공유되기 때문에, 각각의 탭에서는 같은 세션 정보를 사용할 수 있다.</li><li>HttpSession interface를 구현한 객체를 사용한다.</li><li>JSP session 내장 변수를 사용한다.</li><li>Servlet에서는 HttpServletRequest의 getSession() 메소드를 이용하여 seesion 객체를 얻는다.</li><li>값을 저장할 때는 session객체의 setAttribute()메소드를 사용한다.</li><li>값을 읽어 들일 때는 session 객체의 getAttribute()메소드를 사용한다.</li><li>장바구니처럼 사용자 별로 유지가 되어야 할 정보가 있을 때 사용한다.</li><li>client 마다 유지를 해야하는 정보들을 session scope 에서 저장 및 관리</li></ul><h3 id="Application-Scope"><a href="#Application-Scope" class="headerlink" title="Application Scope"></a>Application Scope</h3><ul><li>Web Application이 시작되고 종료될 때까지 변수를 사용할 수 있다.</li><li>ServletContext interface를 구현한 객체를 사용한다.</li><li>JSP에서는 application 내장 객체를 이용한다.</li><li>Servlet의 경우는 getServletContext() method를 이용하여 application 객체를 이용한다.</li><li>Web application 하나당 하나의 application객체가 사용된다.</li><li>값을 저장할 때는 application객체의 setAttribute() method를 사용한다.</li><li>값을 읽어들일 때는 application객체의 getAttribute() method를 사용한다.</li><li>모든 Client가 공통으로 사용해야할 값들이 있을 때 사용한다.</li></ul><h4 id="Application-Scope-examples"><a href="#Application-Scope-examples" class="headerlink" title="Application Scope examples"></a>Application Scope examples</h4><ul><li>ApplicationScope01.java</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">  response.setContentType(<span class="string">&quot;text/html; charset=UTF-8&quot;</span>);</span><br><span class="line">  PrintWriter out = response.getWriter();</span><br><span class="line">  ServletContext application = getServletContext();</span><br><span class="line">  <span class="keyword">int</span> value = <span class="number">1</span>;</span><br><span class="line">  application.setAttribute(<span class="string">&quot;value&quot;</span>, value);</span><br><span class="line">  </span><br><span class="line">  out.println(<span class="string">&quot;&lt;h1&gt;value:&quot;</span> + value + <span class="string">&quot;&lt;/h1&gt;&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>ApplicationScope02.java</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">  response.setContentType(<span class="string">&quot;text/html; charset=UTF-8&quot;</span>);</span><br><span class="line">  PrintWriter out = response.getWriter();</span><br><span class="line">  </span><br><span class="line">  ServletContext application = getServletContext();</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="keyword">int</span> value = (<span class="keyword">int</span>) application.getAttribute(<span class="string">&quot;value&quot;</span>);</span><br><span class="line">    value++;</span><br><span class="line">    application.setAttribute(<span class="string">&quot;value&quot;</span>, value);</span><br><span class="line"></span><br><span class="line">    out.println(<span class="string">&quot;&lt;h1&gt;value : &quot;</span> + value + <span class="string">&quot;&lt;/h1&gt;&quot;</span>);</span><br><span class="line">  &#125; <span class="keyword">catch</span> (NullPointerException e )&#123;</span><br><span class="line">    out.print(<span class="string">&quot;the value was not set.&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>ApplicationScope01.jsp</li></ul><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ page language=<span class="string">&quot;java&quot;</span> contentType=<span class="string">&quot;text/html; charset=UTF-8&quot;</span></span><br><span class="line">    pageEncoding=<span class="string">&quot;UTF-8&quot;</span>%&gt;</span><br><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;meta charset=<span class="string">&quot;UTF-8&quot;</span>&gt;</span><br><span class="line">&lt;title&gt;Insert title here&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;%</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="keyword">int</span> value = (<span class="keyword">int</span>) application.getAttribute(<span class="string">&quot;value&quot;</span>);</span><br><span class="line">    value = value + <span class="number">2</span>;</span><br><span class="line">    application.setAttribute(<span class="string">&quot;value&quot;</span>, value);</span><br><span class="line">%&gt;</span><br><span class="line">    &lt;h1&gt;&lt;%=value %&gt;&lt;/h1&gt;</span><br><span class="line">&lt;%</span><br><span class="line">  &#125; <span class="keyword">catch</span> (NullPointerException e) &#123;</span><br><span class="line">%&gt;</span><br><span class="line">  &lt;h1&gt; 설정된 값이 없습니다. &lt;/h1&gt;</span><br><span class="line">&lt;%</span><br><span class="line">  &#125;</span><br><span class="line">%&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> TIL </category>
          
          <category> JSP </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JSP Syntax </tag>
            
            <tag> Scope </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java Generics</title>
      <link href="/2020/08/28/Java-Generics/"/>
      <url>/2020/08/28/Java-Generics/</url>
      
        <content type="html"><![CDATA[<h2 id="Generics"><a href="#Generics" class="headerlink" title="Generics"></a>Generics</h2><blockquote><p>Generics add stability to your code by making more of your bugs detectable at complie time.</p></blockquote><h3 id="Benefits-of-using-generics"><a href="#Benefits-of-using-generics" class="headerlink" title="Benefits of using generics"></a>Benefits of using generics</h3><ul><li><p>Stronger type checks at complie time.</p><ul><li>A Java complier applies strong type ckecking to generic code and issues errors if the code violates type safety. Fixing complie-time erros is easier than fixing runtime errors, which can be difficult to find.</li></ul></li><li><p>Elimination of casts.</p><ul><li>The following code snippet without generics requires casting:</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">List list = <span class="keyword">new</span> ArrayList();</span><br><span class="line">list.add(<span class="string">&quot;hello&quot;</span>);</span><br><span class="line">String s = (String) list.get(<span class="number">0</span>);</span><br></pre></td></tr></table></figure><ul><li>When re-written to use generics, the code does not require casting:</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">List&lt;String&gt; list = <span class="keyword">new</span> ArrayList&lt;String&gt;();</span><br><span class="line">list.add(<span class="string">&quot;hello&quot;</span>);</span><br><span class="line">String s = list.get(<span class="number">0</span>);   <span class="comment">// no cast</span></span><br></pre></td></tr></table></figure><ul><li>Enabling programmers to implement generic algorithms.<ul><li>By using generics, programmers can implement generic algorithms that work on collections of different types, can be customized, and are type safe and easier to read.</li></ul></li></ul></li></ul><h2 id="Generic-Types"><a href="#Generic-Types" class="headerlink" title="Generic Types"></a>Generic Types</h2><ul><li>Definition: A <em>generic type</em> is generic <code>class</code> or <code>interface</code> that is parameterized over types.</li></ul><h3 id="Generic-Class"><a href="#Generic-Class" class="headerlink" title="Generic Class"></a>Generic Class</h3><ul><li><p>A <em>generic</em> class is defined with the following format:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">name</span>&lt;<span class="title">T1</span>, <span class="title">T2</span>, ..., <span class="title">Tn</span>&gt; </span>&#123; <span class="comment">/* ... */</span> &#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="Type-Prameter-Naming-Conventions"><a href="#Type-Prameter-Naming-Conventions" class="headerlink" title="Type Prameter Naming Conventions"></a>Type Prameter Naming Conventions</h3><ul><li>E: Element(used extensively by the Java Collections Framework)</li><li>K: Key</li><li>N: Number</li><li>T: Type</li><li>V: Value</li><li>S, U, V etc.: 2nd, 3rd, 4th types</li></ul><h3 id="Invoking-and-Instantiating-a-Generic-Type"><a href="#Invoking-and-Instantiating-a-Generic-Type" class="headerlink" title="Invoking and Instantiating a Generic Type"></a>Invoking and Instantiating a Generic Type</h3><ul><li>By performing <em>generic type invocation</em> which replaces <code>T</code> with some concrerate value, such as <code>Integer</code>:</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Box&lt;Integer&gt; intergerBox;</span><br></pre></td></tr></table></figure><ul><li>To instantiate this class, us the <code>new</code> keyword, as usual, but place <code>Integer</code> between the class name and the parenthesis:</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Box&lt;Integer&gt; integerBox = <span class="keyword">new</span> Box&lt;Integer&gt;();</span><br></pre></td></tr></table></figure><ul><li><p>Or, In Java SE 7 and later, you can replace the type argument required to<br>invoke the constructor of a gneeric class with an empty set of type argument (&lt;&gt;) as long as the complier can determin, or infer, the type argument from the context.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Box&lt;Integer&gt; integerBox = <span class="keyword">new</span> Box&lt;&gt;();</span><br></pre></td></tr></table></figure></li></ul><h3 id="Multiple-Type-Parameters"><a href="#Multiple-Type-Parameters" class="headerlink" title="Multiple Type Parameters"></a>Multiple Type Parameters</h3><ul><li>A generic class can have multiple type parameters. For example, the generic <code>OrderedPair</code> class, which implements the generic <code>Pair</code> interface:</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Pair</span>&lt;<span class="title">K</span>, <span class="title">V</span>&gt; </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> K <span class="title">getKey</span><span class="params">()</span></span>;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> V <span class="title">getValue</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OrderedPair</span>&lt;<span class="title">K</span>, <span class="title">V</span>&gt; <span class="keyword">implements</span> <span class="title">Pair</span>&lt;<span class="title">K</span>, <span class="title">V</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> K key;</span><br><span class="line">  <span class="keyword">private</span> V value;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="title">OrderedPair</span><span class="params">(K key, V value)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.key = key;</span><br><span class="line">    <span class="keyword">this</span>.value = value;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> K <span class="title">getKey</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> key; &#125;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> V <span class="title">getValue</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> value; &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>The following statements create two instantiations of the <code>OrderdPair</code> class:</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Pair&lt;String, Integer&gt; p1 = <span class="keyword">new</span> OrderedPair&lt;String, Integer&gt;(<span class="string">&quot;Even&quot;</span>, <span class="number">8</span>);</span><br><span class="line">Pair&lt;String, String&gt;  p2 = <span class="keyword">new</span> OrderedPair&lt;String, String&gt;(<span class="string">&quot;hello&quot;</span>, <span class="string">&quot;world&quot;</span>);</span><br></pre></td></tr></table></figure><h3 id="Parameterized-Types"><a href="#Parameterized-Types" class="headerlink" title="Parameterized Types"></a>Parameterized Types</h3><ul><li>You can also substitute a type paramter (i.e. K or V) with a parametrized(i.e. <code>List&lt;String&gt;</code>). For example, using the <code>OrderedPair&lt;K, V&gt;</code> example:</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">OrderedPair&lt;String, Box&lt;Integer&gt;&gt; p = <span class="keyword">new</span> OrderedPair&lt;&gt;(<span class="string">&quot;primes&quot;</span>, <span class="keyword">new</span> Box&lt;Integer&gt;(...));</span><br></pre></td></tr></table></figure><h3 id="Raw-Types"><a href="#Raw-Types" class="headerlink" title="Raw Types"></a>Raw Types</h3><ul><li>A <em>raw type</em> is the name of a generic <code>class</code> or interface without any type arguments. For example, given the generic <code>Box</code> classes:</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Box</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">set</span><span class="params">(T t)</span> </span>&#123; <span class="comment">/* ... */</span> &#125;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Generic-Methods"><a href="#Generic-Methods" class="headerlink" title="Generic Methods"></a>Generic Methods</h3><p><em>Generic methods</em> are methods that introduce their own type parameters.<br>This is similar to declaring a generic type, but the type parameter’s scope is limited to the method where it is declared. Static and non-static generic methods are allowed, as well as class constructors.</p><p>The syntax for a generic method includes a list of type parameters, inside angle brackets, which appears before the method’s return type. For static generic methods, the type parameter section must appear before the method’s return type.</p><p>The <code>Util</code> class includes a generic method, <code>compare</code>, which compares two <code>pair</code> objects:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Util</span> </span>&#123;</span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> &lt;K, V&gt; <span class="function"><span class="keyword">boolean</span> <span class="title">compare</span><span class="params">(Pair&lt;K, V&gt; p1, Pair&lt;K, V&gt; p2)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> p1.getKey().equals(p2.getKey()) &amp;&amp; p1.getValue().equals(p2.getValue());</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Pair</span>&lt;<span class="title">K</span>, <span class="title">V</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> K key;</span><br><span class="line">  <span class="keyword">private</span> V value;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="title">Pair</span><span class="params">(K key, V value)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.key = key;</span><br><span class="line">    <span class="keyword">this</span>.value = value;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setKey</span><span class="params">(K key)</span> </span>&#123; <span class="keyword">this</span>.key = key; &#125;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setValue</span><span class="params">(V value)</span> </span>&#123; <span class="keyword">this</span>.value = value; &#125;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> K <span class="title">getKey</span><span class="params">()</span>   </span>&#123; <span class="keyword">return</span> key; &#125;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> V <span class="title">getValue</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> value; &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Bounded-Type-Parameters"><a href="#Bounded-Type-Parameters" class="headerlink" title="Bounded Type Parameters"></a>Bounded Type Parameters</h3><p>There may be times when you want to restrict the types that can be used as type arguments in a parameterized type. For example, a method that operates on numbers might only want to accept instances of Number or its subclasses.<br>This is what <em>bounded type parameters are for</em>.</p><p>To declare a bounded type parmeter, list hte type parameter’s name. followed by the extends keyword, followed by its <em>upper bound</em>, which in this example is Number. Note that, in this context, <code>extends</code> is used in a general sense to mean either “extends” (as in classed) or “implements” (as in interfaces)</p><h4 id="Multiple-Bounds"><a href="#Multiple-Bounds" class="headerlink" title="Multiple Bounds"></a>Multiple Bounds</h4><p>The preceding example illustrates the use of a type parameter with a single bound, but a type parameter can have <em>multiple bounds</em>:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;T extends B1 &amp; B2 &amp; B3&gt;</span><br></pre></td></tr></table></figure><p>If one of the bounds is class, it must be specified first. For example:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span> </span>&#123; <span class="comment">/* ... */</span>&#125;</span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">B</span> </span>&#123; <span class="comment">/* ... */</span>&#125;</span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">C</span> </span>&#123; <span class="comment">/* ... */</span> &#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">D</span> &lt;<span class="title">T</span> <span class="keyword">extends</span> <span class="title">A</span> &amp; <span class="title">B</span> &amp; <span class="title">C</span>&gt; </span>&#123; <span class="comment">/* ... */</span> &#125;</span><br></pre></td></tr></table></figure><p>If bound <code>A</code> is not specified first, you get a compile-time error.</p><h3 id="Wildcards"><a href="#Wildcards" class="headerlink" title="Wildcards"></a>Wildcards</h3><p>In generic code, the question mark (?), called the <em>wildcard</em>, represents an unknown type. The wildcard can be used in a variety of situations: as the type of a parameter, field, or local variable; sometimes as a return type. The wildcard is never used as a type argument for a generic method invocation, a generic class instance creation, or a supertype.</p><h4 id="Unbounded-Wildcards"><a href="#Unbounded-Wildcards" class="headerlink" title="Unbounded Wildcards"></a>Unbounded Wildcards</h4><p>The unbounded wildcard type is specified using the wildcards character (<code>?</code>), for example, List&lt;?&gt;, This is called <em>list of unknown type</em>. There are two senarios where an unbounded wildcard is a useful appoach:</p><ul><li>If you are writing a method that can be implemented using functionality provided in the <code>object</code> class.</li><li>When the code is using methods in the generic class that don’t depend on the type parameter.</li></ul><h4 id="Upperbounded-Wildcards"><a href="#Upperbounded-Wildcards" class="headerlink" title="Upperbounded Wildcards"></a>Upperbounded Wildcards</h4><p>To declare an upper-bounded wildcard, use the wildcard character (<code>?</code>), followed by the <code>extends</code> keyword, followed by its <code>upper bound</code>. Note that, in this context, <code>extends</code> is used in general senese to mean either “extends” (as in classes) or “implements” (as in interfaces).</p><h4 id="LowerBounded-Wildcards"><a href="#LowerBounded-Wildcards" class="headerlink" title="LowerBounded Wildcards"></a>LowerBounded Wildcards</h4><p>A lower bounded wildcard is expressed using the wildcard character (<code>?</code>), follwing by the <code>super</code> keyword, followed by its <em>lower bound</em>: <code>&lt;? super A&gt;</code></p><p>Say you want to write a method that puts <code>Integer</code> objects into a list. To maximize flexibility, you would like the method to work on <code>List&lt;Integer&gt;</code>, <code>List&lt;Number&gt;</code>, and <code>List&lt;Object&gt;</code> – anything that can hold <code>Integer</code> values.</p><h3 id="Restrictions-on-Generics"><a href="#Restrictions-on-Generics" class="headerlink" title="Restrictions on Generics"></a>Restrictions on Generics</h3><ul><li><p>Cannot instantiate generic types with primitypes</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Pair&lt;<span class="keyword">int</span>, <span class="keyword">char</span>&gt; p = <span class="keyword">new</span> Pair&lt;&gt;(<span class="number">8</span>, <span class="string">&#x27;a&#x27;</span>); <span class="comment">// compile-time error</span></span><br><span class="line">Pair&lt;Integer, Character&gt; p = <span class="keyword">new</span> Pair&lt;&gt;(<span class="number">8</span>, <span class="string">&#x27;a&#x27;</span>);</span><br></pre></td></tr></table></figure></li><li><p>Cannot create instance of type parameters</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> &lt;E&gt; <span class="function"><span class="keyword">void</span> <span class="title">append</span><span class="params">(List&lt;E&gt; list)</span> </span>&#123;</span><br><span class="line">  E elem = <span class="keyword">new</span> E(); <span class="comment">// complie-time error</span></span><br><span class="line">  list.add(elem);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>Cannot declare static fields whose types are type parameters</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MobileDevice</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">static</span> T os;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// ...</span></span><br></pre></td></tr></table></figure></li><li><p>Cananot use cast or <code>instanceof</code> with parameterized types</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> &lt;E&gt; <span class="function"><span class="keyword">void</span> <span class="title">rtti</span><span class="params">(List&lt;E&gt; list)</span> </span>&#123;</span><br><span class="line">  Object obj = <span class="keyword">new</span> Object();</span><br><span class="line">  <span class="keyword">if</span> (obj <span class="keyword">instanceof</span> E) &#123; <span class="comment">// not possible</span></span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (list <span class="keyword">instanceof</span> ArrayList&lt;Integer&gt;) &#123; <span class="comment">// compile-time error</span></span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>Cannot create arrays of parameterized types</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">List&lt;Integer&gt;[] arrayOfLists = <span class="keyword">new</span> List&lt;Integer&gt;[<span class="number">2</span>]; <span class="comment">// compile-time error</span></span><br></pre></td></tr></table></figure><ul><li>Cannot create, catch, or throw object of parameterized types<ul><li>A gneneric class connot extend the <code>Throwable</code> class directly or indirectly. For example, the following classes will not complie.</li></ul></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Extends Throwable indirectly</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MathException</span>&lt;<span class="title">T</span>&gt; <span class="keyword">extends</span> <span class="title">Exception</span> </span>&#123; <span class="comment">/* ... */</span> &#125; <span class="comment">// compile-time error</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Extends Throwable directly</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">QueueFullException</span>&lt;<span class="title">T</span>&gt; <span class="keyword">extends</span> <span class="title">Throwable</span> </span>&#123; <span class="comment">/* ... */</span> &#125; <span class="comment">// compile-time error</span></span><br></pre></td></tr></table></figure><ul><li><p>Cannot overload a method where the format parameter types of each overloads erase to the same raw type.</p><ul><li>A class cannot have two overloaded methods that will have the same signature after type erasure.</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Example</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">print</span><span class="params">(Set&lt;String&gt; strSet)</span> </span>&#123; &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">print</span><span class="params">(Set&lt;Integer&gt; intSet)</span> </span>&#123; &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>The overloads would all share the same classfile representation and will generate a compile-time error.</li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
          <category> Generics </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> Generics </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>200828-TIL</title>
      <link href="/2020/08/28/200828-TIL/"/>
      <url>/2020/08/28/200828-TIL/</url>
      
        <content type="html"><![CDATA[<h2 id="요청과-응답"><a href="#요청과-응답" class="headerlink" title="요청과 응답"></a>요청과 응답</h2><p><img src="/images/3.png" alt="request and response"></p><p>Was는 웹 브라우저로부터 Servlet요청을 받으면,</p><ul><li>요청할 때 가지고 있는 정보를 HttpServletRequest객체를 생성하여 저장합니다.</li><li>웹 브라우저에게 응답을 보낼 때 사용하기 위해 HttpServletResponse객체를 생성합니다.</li><li>생성된 HttpServletRequest, HttpServletResponse 객체를 서블릿에게 전달 합니다.</li></ul><h3 id="HttpServletRequest"><a href="#HttpServletRequest" class="headerlink" title="HttpServletRequest"></a>HttpServletRequest</h3><ul><li>http 프로토콜의 request 정보를 서블릿에게 전달하기 위한 목적으로 사용</li><li>헤더정보, 파라미터, 쿠기, URI, URL등의 정보를 읽어 들이는 메소드를 가지고 있다.</li><li>Body의 Stream을 읽어 들이는 메소드를 가지고 있다.</li></ul><h3 id="HttpServletResponse"><a href="#HttpServletResponse" class="headerlink" title="HttpServletResponse"></a>HttpServletResponse</h3><ul><li>WAS는 어떤 클라이언트가 요청을 보냈는지 알고 있고, 해당 클라이언트에게 응답을 보내기 위한 HttpServletResponse객체를 생성하여 Servlet에게 전달</li><li>Servlet은 해당 객체를 이용하여 content type, 응답 코드, 응답 메시지 등을 전송</li></ul><h3 id="Header정보-읽어-들이기"><a href="#Header정보-읽어-들이기" class="headerlink" title="Header정보 읽어 들이기"></a>Header정보 읽어 들이기</h3><ul><li>Web browser가 요청정보에 담아서 보내는 header값을 읽어 들여 브라우저 화면에 출력한다.</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">  response.setContentType(<span class="string">&quot;text/html&quot;</span>);</span><br><span class="line">  PrintWriter out = response.getWriter();</span><br><span class="line">  out.println(<span class="string">&quot;&lt;html&gt;&quot;</span>);</span><br><span class="line">  out.println(<span class="string">&quot;&lt;head&gt;&lt;title&gt;form&lt;/title&gt;&lt;/head&gt;&quot;</span>);</span><br><span class="line">  out.println(<span class="string">&quot;&lt;body&gt;&quot;</span>);</span><br><span class="line"></span><br><span class="line">  Enumeration&lt;String&gt; headerNames = request.getHeaderNames();</span><br><span class="line">  <span class="keyword">while</span>(headerNames.hasMoreElements()) &#123;</span><br><span class="line">    String headerName = headerNames.nextElement();</span><br><span class="line">    String headerValue = request.getHeader(headerName);</span><br><span class="line">    out.println(headerName + <span class="string">&quot;:&quot;</span> + headerValue + <span class="string">&quot;&lt;br&gt;&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  out.println(<span class="string">&quot;&lt;/body&gt;&quot;</span>);</span><br><span class="line">  out.println(<span class="string">&quot;&lt;/html&gt;&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>parameter를 읽어서 browser에 출력</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">  response.setContentType(<span class="string">&quot;text/html&quot;</span>);</span><br><span class="line">  PrintWriter out = response.getWriter();</span><br><span class="line">  out.println(<span class="string">&quot;&lt;html&gt;&quot;</span>);</span><br><span class="line">  out.println(<span class="string">&quot;&lt;head&gt;&lt;title&gt;from&lt;/title&gt;&lt;/head&gt;&quot;</span>);</span><br><span class="line">  out.println(<span class="string">&quot;&lt;body&gt;&quot;</span>);</span><br><span class="line">  </span><br><span class="line">  String name = request.getParameter(<span class="string">&quot;name&quot;</span>);</span><br><span class="line">  String age = request.getParameter(<span class="string">&quot;age&quot;</span>);</span><br><span class="line">  </span><br><span class="line">  out.println(<span class="string">&quot;name:&quot;</span> + name + <span class="string">&quot;&lt;br&gt;&quot;</span>);</span><br><span class="line">  out.println(<span class="string">&quot;age:&quot;</span> + age + <span class="string">&quot;&lt;br&gt;&quot;</span>);</span><br><span class="line">  </span><br><span class="line">  out.println(<span class="string">&quot;&lt;/body&gt;&quot;</span>);</span><br><span class="line">  out.println(<span class="string">&quot;&lt;/html&gt;&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>그 외 오쳥정보 출력(URI, URL, PATH, Remote host 등에 대한 정보 출력)<ul><li>URI: port번호 이하의 내용을 보여 준다.</li><li>URL: 요청 주소 전체가 보여진다.</li><li>contentPath: web application 과 mapping 된 path</li><li>remoteAddr: client의 주소</li></ul></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">  response.setContentType(<span class="string">&quot;text/html&quot;</span>);</span><br><span class="line">  PrintWriter out = response.getWriter();</span><br><span class="line">  out.println(<span class="string">&quot;&lt;html&gt;&quot;</span>);</span><br><span class="line">  out.println(<span class="string">&quot;&lt;head&gt;&lt;title&gt;info&lt;/title&gt;&lt;/head&gt;&quot;</span>);</span><br><span class="line">  out.println(<span class="string">&quot;&lt;body&gt;&quot;</span>);</span><br><span class="line">  </span><br><span class="line">  String uri = request.getRequestURI();</span><br><span class="line">  StringBuffer url = request.getRequestURL();</span><br><span class="line">  String contentPath = request.getContextPath();</span><br><span class="line">  String remoteAddr = request.getRemoteAddr();</span><br><span class="line">  </span><br><span class="line">  out.println(<span class="string">&quot;uri: &quot;</span> + uri + <span class="string">&quot;&lt;br&gt;&quot;</span>);</span><br><span class="line">  out.println(<span class="string">&quot;url: &quot;</span> + url + <span class="string">&quot;&lt;br&gt;&quot;</span>);</span><br><span class="line">  out.println(<span class="string">&quot;contentPath: &quot;</span> + contentPath + <span class="string">&quot;&lt;br&gt;&quot;</span>);</span><br><span class="line">  out.println(<span class="string">&quot;remoteAddr: &quot;</span> + remoteAddr + <span class="string">&quot;&lt;br&gt;&quot;</span>);</span><br><span class="line">  </span><br><span class="line">  out.println(<span class="string">&quot;&lt;/body&gt;&quot;</span>);</span><br><span class="line">  out.println(<span class="string">&quot;&lt;/html&gt;&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="JSP-JavaServer-Pages"><a href="#JSP-JavaServer-Pages" class="headerlink" title="JSP(JavaServer Pages)"></a>JSP(JavaServer Pages)</h2><ul><li>JSP의 위치는 기본적으로 WebContent 안에 들어간다.</li><li>JSP는 근본적으로 Servlet으로 변환되어 실행 된다.</li></ul><h3 id="JSP-등장-배경"><a href="#JSP-등장-배경" class="headerlink" title="JSP 등장 배경"></a>JSP 등장 배경</h3><ul><li>MS에서 ASP(Active Server Page) 라는 쉽게 웹을 개발 할 수 있는 스크립트(script) 엔진을 발표함(1998년)</li><li>1997년에 발표된 Servlet은 ASP에 비하여 상대적으로 개발 방식이 불편함 -&gt; HTML 코드를 많이 넣어 주어야 했음</li><li>ASP에 대항하기 위해서 1999sus SUN에서 JSP를 발표</li><li>JSP는 실제로 Servlet기술을 사용</li></ul><h3 id="JSP-Example"><a href="#JSP-Example" class="headerlink" title="JSP Example"></a>JSP Example</h3><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ page language=<span class="string">&quot;java&quot;</span> contentType=<span class="string">&quot;text/html; charset=UTF-8&quot;</span></span><br><span class="line">    pageEncoding=<span class="string">&quot;UTF-8&quot;</span>%&gt;</span><br><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;meta charset=<span class="string">&quot;UTF-8&quot;</span>&gt;</span><br><span class="line">&lt;title&gt;Insert title here&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line"></span><br><span class="line">&lt;%</span><br><span class="line">  <span class="keyword">int</span> total = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= <span class="number">10</span>; i++) &#123;</span><br><span class="line">    total = total + i;</span><br><span class="line">  &#125;</span><br><span class="line">%&gt;</span><br><span class="line"></span><br><span class="line"><span class="number">1</span>부터 <span class="number">10</span> 까지의 합: &lt;%=total %&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><h3 id="JSP-Life-Cycle"><a href="#JSP-Life-Cycle" class="headerlink" title="JSP Life Cycle"></a>JSP Life Cycle</h3><ol><li>Browser가 Web server에 JSP에 대한 요청 정보를 전달 한다.</li><li>Browser가 요청한 JSP가 최초로 요청했을 경우만<ol><li>JSP로 작성된 코드가 Servlet 코드로 변환 된다. (Java file 생성)</li><li>Servlet 코드를 컴파일해서 실행가능한 bytecode로 변환한다. (class file 생성)</li><li>Servlet class를 로딩하고 인스턴스를 생성한다.</li></ol></li><li>Servlet이 실행되어 요청을 처리하고 응답 정보를 생성한다.</li></ol><ul><li>JSP life cycle 확인 Example</li></ul><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ page language=<span class="string">&quot;java&quot;</span> contentType=<span class="string">&quot;text/html; charset=UTF-8&quot;</span></span><br><span class="line">    pageEncoding=<span class="string">&quot;UTF-8&quot;</span>%&gt;</span><br><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;meta charset=<span class="string">&quot;UTF-8&quot;</span>&gt;</span><br><span class="line">&lt;title&gt;Insert title here&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">hello~~</span><br><span class="line">&lt;%</span><br><span class="line">  System.out.println(<span class="string">&quot;_jspService()&quot;</span>);</span><br><span class="line">%&gt;</span><br><span class="line"></span><br><span class="line">&lt;%!</span><br><span class="line"><span class="comment">// 메소드를 추가할 수 있다</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">jspInit</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  System.out.println(<span class="string">&quot;jspInit()!&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">jspDestroy</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  System.out.println(<span class="string">&quot;jspDestory()&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">%&gt;</span><br><span class="line"></span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> TIL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> HTTP </tag>
            
            <tag> Request </tag>
            
            <tag> Response </tag>
            
            <tag> JSP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>200827 TIL</title>
      <link href="/2020/08/27/200827-TIL/"/>
      <url>/2020/08/27/200827-TIL/</url>
      
        <content type="html"><![CDATA[<h2 id="Java-Web-Application"><a href="#Java-Web-Application" class="headerlink" title="Java Web Application"></a>Java Web Application</h2><ul><li>WAS에 deploy 되어 동작하는 어플리케이션.</li><li>자바 웹 어플리케이션에는 HTML, CSS, 이미지, 자바로 작성된 클래스(Servlet도 포함됨, package, interface 등), 각종 설정 파일들이 포함 된다.</li></ul><h2 id="Servlet"><a href="#Servlet" class="headerlink" title="Servlet"></a>Servlet</h2><ul><li>Java Web Application의 구성요소 중 동적인 처리를 하는 프로그램의 역할</li><li>WAS에서 동작하는 JAVA class이다.</li><li>Servlet은 HttpServlet에서 클래스를 상속 받아야 한다.</li><li>Servlet과 JSP로부터 최상의 결과를 얻으려면, 웹 페이지를 개발할 때 이 두가지(JSP, Servlet) 을 조화롭게 사용해야 한다. (ex. Web page를 구성하는 화면 HTML은 JSP로 표현하고, 복잡한 프로그래밍은 Servlet으로 구현)</li></ul><h2 id="Servlet의-작성-방법"><a href="#Servlet의-작성-방법" class="headerlink" title="Servlet의 작성 방법"></a>Servlet의 작성 방법</h2><p>3.x 버전과 그 아래 버전이 다르다는 점 유의</p><ol><li>Servlet 3.0 spec이상에서 사용하는 방법</li></ol><ul><li>web.xml 파일을 사용 X</li><li>Java annotation을 사용</li></ul><ol start="2"><li>Servlet 3.0 spec 미만에서 사용하는 방법</li></ol><ul><li>Servlet을 등록할 때 web.xml파일에 등록</li></ul><h2 id="Servlet의-Life-Cycle"><a href="#Servlet의-Life-Cycle" class="headerlink" title="Servlet의 Life Cycle"></a>Servlet의 Life Cycle</h2><p><img src="/images/2.png" alt="Servlet Life Cycle"></p><ul><li>WAS는 서블릿 요청을 받으면 해당 서블릿이 메모리에 있는지 확인 합니다.</li><li>if (메모리에 없음) {<br>해당 Servlet class를 memory에 올림<br>init() 메소드를 실행<br>}</li><li>service() 메소드를 실행</li><li>was가 종료되거나, 웹 어플리케이션이 새롭게 갱신될 경우 destroy() 메소드가 실행 된다.</li><li>HttpServlet의 3가지 method를 override 해서 확인</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> examples;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletConfig;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.annotation.WebServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"></span><br><span class="line"><span class="meta">@WebServlet(&quot;/LifecycleServlet&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LifecycleServlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = <span class="number">1L</span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">LifecycleServlet</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      System.out.println(<span class="string">&quot;LifecycleServlet 생성&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">(ServletConfig config)</span> <span class="keyword">throws</span> ServletException </span>&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;init 호출!!&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">destroy</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;Destroy 호출!!&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">service</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;Service 호출!!&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="service-request-response-메소드"><a href="#service-request-response-메소드" class="headerlink" title="service(request, response) 메소드"></a>service(request, response) 메소드</h2><ul><li>HttpServlet의 service method는 template method 패턴으로 구현</li><li>클라이언트 요청이 GET일경우 자신이 가지고 있는 doGET(request, response) 메소드를 호출</li><li>클라이언트 요청이 Post일경우 자신이 가지고 있는 doPost(request, response)를 호출</li><li>override 된 method만 정리</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">  resp.setContentType(<span class="string">&quot;text/html&quot;</span>);</span><br><span class="line">  PrintWriter out = resp.getWriter();</span><br><span class="line">  out.println(<span class="string">&quot;&lt;html&gt;&quot;</span>);</span><br><span class="line">  out.println(<span class="string">&quot;&lt;head&gt;&lt;title&gt;form&lt;/title&gt;&lt;/head&gt;&quot;</span>);</span><br><span class="line">  out.println(<span class="string">&quot;&lt;body&gt;&quot;</span>);</span><br><span class="line">  out.println(<span class="string">&quot;&lt;form method=&#x27;post&#x27; action=&#x27;/firstweb/LifecycleServlet&#x27;&gt;&quot;</span>);</span><br><span class="line">  out.println(<span class="string">&quot;name : &lt;input type=&#x27;text&#x27; name=&#x27;name&#x27;&gt;&lt;br&gt;&quot;</span>);</span><br><span class="line">  out.println(<span class="string">&quot;&lt;input type=&#x27;submit&#x27; value=&#x27;ok&#x27;&gt;&lt;br&gt;&quot;</span>);</span><br><span class="line">  out.println(<span class="string">&quot;&lt;/form&gt;&quot;</span>);</span><br><span class="line">  out.println(<span class="string">&quot;&lt;/body&gt;&quot;</span>);</span><br><span class="line">  out.println(<span class="string">&quot;&lt;/html&gt;&quot;</span>);</span><br><span class="line">  out.close();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">  resp.setContentType(<span class="string">&quot;text/html&quot;</span>);</span><br><span class="line">  PrintWriter out = resp.getWriter();</span><br><span class="line">  String name = req.getParameter(<span class="string">&quot;name&quot;</span>);</span><br><span class="line">  out.println(<span class="string">&quot;&lt;h1&gt; hello &quot;</span> + name + <span class="string">&quot;&lt;/h1&gt;&quot;</span>);</span><br><span class="line">  out.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> TIL </category>
          
          <category> Servlet </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Servlet </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>200826 TIL</title>
      <link href="/2020/08/26/200826-TIL/"/>
      <url>/2020/08/26/200826-TIL/</url>
      
        <content type="html"><![CDATA[<h2 id="HTTP-Hypertext-Transfer-Protocol"><a href="#HTTP-Hypertext-Transfer-Protocol" class="headerlink" title="HTTP(Hypertext Transfer Protocol)"></a>HTTP(Hypertext Transfer Protocol)</h2><ul><li>Tim Berners-Lee와 그가 속한 팀은 CERN에서 HTML뿐만 아니라 웹 브라우저 및 웹 브라우저 관련 기술과 HTTP를 발명하였다.</li><li>문서화된 최초의 HTTP버전은 HTTP v0.9(1991년)이다.</li><li>HTTP는 서버와 클라이언트가 인터넷 상에서 데이터를 주고받기 위한 protocol이다.</li><li>HTTP는 계속 발전하여 HTTP/2까지 버전이 등장했다.</li></ul><h3 id="HTTP-작동방식"><a href="#HTTP-작동방식" class="headerlink" title="HTTP 작동방식"></a>HTTP 작동방식</h3><ul><li>HTTP는 Server/Client model을 따른다.</li><li>장점<ul><li>불특정 다수를 대상으로 하는 서비스에는 적합하다.</li><li>클라이언트와 서버가 계속 연결된 형태가 아니기 때문에 클라이언트와 서버 간의 최대 연결 수 보다 훨신 더 많은 요청과 응답을 처리할 수 있다.</li></ul></li><li>단점<ul><li>연결을 끊어버리기 때문에, 클라이언트의 이전 상황을 알 수 없다.</li><li>이러한 특징을 무상태(Stateless)라고 한다.</li><li>이러한 특징 때문에 정보를 유지하기 위해서 Cookie와 같은 기술이 등장하게 되었다.</li></ul></li></ul><h3 id="HTTP-요청-Method의-구조"><a href="#HTTP-요청-Method의-구조" class="headerlink" title="HTTP 요청 Method의 구조"></a>HTTP 요청 Method의 구조</h3><ul><li>요청 Method: GET, PUT, POST, PUSH, OPTIONS등의 요청 방식이 온다.<ul><li>GET: 정보를 요청하기 위해서 사용 (SELECT)</li><li>POST: 정보를 밀어 넣기 위해서 사용 (INSERT)</li><li>PUT: 정보를 업데이트하기 위해서 사용 (UPDATE)</li><li>DELETE: 정보를 삭제하기 위해서 사용 (DELETE)</li><li>HEAD: (HTTP)헤더 정보만 요청한다. 해당 자원이 존재하는지 혹은 서버에 문제가 없는지를 확인하기 위해서 사용한다.</li><li>OPTIONS: 웹서버가 지원하는 메서드의 종류를 요청한다.</li><li>TRACE: 클라이언트의 요청을 그대로 반환한다. 예컨데 echo 서비스로 서버 상태를 확인하기 위한 목적으로 주로 사용한다.</li></ul></li><li>요청 URI: 요청하는 자원의 위치를 명시한다.</li><li>HTTP 프로토콜 버전: 웹 브라우저가 사용하는 프로토콜 버전이다.</li></ul><h2 id="URL-Uniform-Resource-Locator"><a href="#URL-Uniform-Resource-Locator" class="headerlink" title="URL(Uniform Resource Locator)"></a>URL(Uniform Resource Locator)</h2><ul><li>인터넷 상의 자원의 위치</li><li>특정 웹 서버의 특정 파일에 접근 하기위한 경로 혹은 주소</li></ul><h2 id="Web-Server"><a href="#Web-Server" class="headerlink" title="Web Server"></a>Web Server</h2><ul><li>Web Server는 Web Server Software 가 동작하는 컴퓨터를 말한다.</li><li>Web Server의 가장 중요한 기능은 Client가 요청하는 HTML문서나 각종 Resource를 전달하는 것이다.</li><li>Web brower나 web crawler가 요청하는 Resource는 컴퓨터에 저장된 정적 데이터 이거나 동적인 결과가 될 수 있다.</li></ul><h2 id="Web-Server-Software의-종류"><a href="#Web-Server-Software의-종류" class="headerlink" title="Web Server Software의 종류"></a>Web Server Software의 종류</h2><ul><li>가장 많이 사용하는 웹 서버는 Aphache, Nginx, Microsoft IIS</li><li>Apache 웹 서버는 Apache Software Foundation에서 개발한 웹서버로 오픈소스 소프트웨어(Open-source Software)이며, 거의 대부분 운영체제에서 설치 및 사용을 할 수 있다.</li><li>Nginx는 차세대 웹서버로 불리며 더 적은 자원으로 더 빠르게 데이터를 서비스하는 것을 목적으로 만들어진 서버이며 Apache웹 서버와 마찬가지로 오픈소스 소프트웨어입니다.</li></ul><h2 id="WAS-Web-Application-Server"><a href="#WAS-Web-Application-Server" class="headerlink" title="WAS(Web Application Server)"></a>WAS(Web Application Server)</h2><ul><li>WAS는 일종의 MiddleWare로 Web Client(보통 web browser)의 요청 중 보통 web application이 동작하도록 지원하는 목적을 가진다.</li><li>초창기 Web Server는 정적인 content를 주로 제공하였으나 동적인 컨텐츠의 수요가 증가 함에 따라서 WAS가 대두 되게 되었다.</li><li>WAS가 보통 웹 서버 기능을 내장하고 있다.</li><li>현재는 WAS가 가지고 있는 웹 서버도 정적인 contents를 처리하는데 있어서 성능상 큰 차이가 없다.</li><li>규모가 커질수록 웹 서버와 WAS를 분리한다.<ul><li>자원 이용의 효율성 및 장애 극복 기능(failover), 유지 보수의 편의성을 위해 분리</li></ul></li><li>보통 Web Server가 WAS 앞단에서 동작하도록 한다.</li></ul><h3 id="Client-Server-구조"><a href="#Client-Server-구조" class="headerlink" title="Client/Server 구조"></a>Client/Server 구조</h3><ul><li>Client는 Service를 제공하는 Server에게 정보를 요청하며 응답 받은 결과를 사용합니다.</li></ul><h3 id="DBMS-Database-Management-System"><a href="#DBMS-Database-Management-System" class="headerlink" title="DBMS(Database Management System)"></a>DBMS(Database Management System)</h3><ul><li>다수의 사용자들이 데이터베이스 내의 데이터를 접근할 수 있도록 해주는 소프트웨어</li></ul><h3 id="MiddleWare"><a href="#MiddleWare" class="headerlink" title="MiddleWare"></a>MiddleWare</h3><ul><li>Client쪽에 비즈니스 로직이 많을 경우, Client 관리(배포 등)로 인해 비용이 많이 발생하는 문제가 발생</li><li>비즈니스 로직을 Client와 DBMS사이의 middleware server에서 동작하도록 함으로써 client는 입력과 출력을 담당하도록 함</li></ul><h2 id="Apache-Tomcat"><a href="#Apache-Tomcat" class="headerlink" title="Apache Tomcat"></a>Apache Tomcat</h2><p>Apache Tomcat is an open-source implementation of the Java servlet, JavaServer Pages, Java Expression Language and WebSocket technologogies.<br>Tomcat provies a “pure Java” HTTP web server environment in which Java code can run.</p><ul><li>Apache Tomcat: The most widley used WAS developed from Apache Software Foundation.</li><li>Web Application can run on top of the WAS that is analogous to relation between application and Operating System.</li></ul>]]></content>
      
      
      <categories>
          
          <category> TIL </category>
          
          <category> HTTP </category>
          
      </categories>
      
      
        <tags>
            
            <tag> HTTP </tag>
            
            <tag> Web Server </tag>
            
            <tag> WAS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>200825 TIL</title>
      <link href="/2020/08/25/200825-TIL/"/>
      <url>/2020/08/25/200825-TIL/</url>
      
        <content type="html"><![CDATA[<h2 id="Quick-Sort"><a href="#Quick-Sort" class="headerlink" title="Quick Sort"></a>Quick Sort</h2><ul><li><p>Pivot을 기준으로 왼쪽에는 작은 숫자 오른 쪽에 큰 숫자가 오도록 하고, Pivot을 기준으로 좌우를 분할하여 subarray에 대해서도 이어서 진행한다.</p></li><li><p>Hoare Parition: 리스트에서 첫 번째 데이터를 피벗으로 정한다.</p></li><li><p>시간 복잡도: O(NlogN)</p></li><li><p>가장 왼쪽 데이터를 pivot으로 정할 경우, 이미 데이터가 정렬되어 있는 경우에 O(N^2)의 시간 복잡도가 걸린다.</p></li><li><p>Example:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Implementation of quick sort</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">quick_sort</span>(<span class="params">array, start, end</span>):</span></span><br><span class="line">  <span class="keyword">if</span> start &gt;= end:</span><br><span class="line">    <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">  pivot = start <span class="comment"># pick a pivot according to the Hoare Partition</span></span><br><span class="line">  left = start + <span class="number">1</span></span><br><span class="line">  right = end</span><br><span class="line">  <span class="keyword">while</span> left &lt;= right:</span><br><span class="line">    <span class="comment"># Loop until find element which is greater than pivot value.</span></span><br><span class="line">    <span class="keyword">while</span> left &lt;= end <span class="keyword">and</span> array[left] &lt;= array[pivot]:</span><br><span class="line">      left += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># Loop until find element which is less than pivot value.</span></span><br><span class="line">    <span class="keyword">while</span> right &gt; start <span class="keyword">and</span> array[right] &gt;= array[pivot]:</span><br><span class="line">      right -= <span class="number">1</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># partition completed</span></span><br><span class="line">    <span class="keyword">if</span> left &gt; right:</span><br><span class="line">      array[right], array[pivot] = array[pivot], array[right]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">      array[left], array[right] = array[right], array[left]</span><br><span class="line"></span><br><span class="line">  quick_sort(array, start, right - <span class="number">1</span>)</span><br><span class="line">  quick_sort(array, right + <span class="number">1</span>, end)</span><br></pre></td></tr></table></figure></li></ul><h2 id="Merge-Sort"><a href="#Merge-Sort" class="headerlink" title="Merge Sort"></a>Merge Sort</h2><ul><li>대표적인 Divide-and-Conquer algorithm</li><li>array를 반으로 나누면서 진행, 더이상 나눠질 수 없을 때까지 나눈 뒤  병합(merge)하는 과정을 거친다.</li><li>병합하는 과정에서 두개의 배열 원소들을 비교 하는 과정을 거친다.</li><li>Example:</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Implementation of MergeSort</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">merge_sort</span>(<span class="params">arr</span>):</span></span><br><span class="line">  <span class="keyword">if</span> len(arr) &gt; <span class="number">1</span>:</span><br><span class="line">    mid = len(arr) // <span class="number">2</span></span><br><span class="line">    left = arr[:mid]</span><br><span class="line">    right = arr[mid:]</span><br><span class="line"></span><br><span class="line">    merge_sort(left)</span><br><span class="line">    merge_sort(right)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Merge</span></span><br><span class="line">    i = j = k = <span class="number">0</span></span><br><span class="line">    <span class="keyword">while</span> i &lt; len(left) <span class="keyword">or</span> j &lt; len(right):</span><br><span class="line">      <span class="keyword">if</span> i &lt; len(left) <span class="keyword">and</span> j &lt; len(right):</span><br><span class="line">        <span class="keyword">if</span> left[i] &lt; right[j]:</span><br><span class="line">          arr[k] = left[i]</span><br><span class="line">          i += <span class="number">1</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">          arr[k] = right[j]</span><br><span class="line">          j += <span class="number">1</span></span><br><span class="line">      <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">if</span> i &lt; len(left):</span><br><span class="line">          arr[k] = left[i]</span><br><span class="line">          i += <span class="number">1</span></span><br><span class="line">        <span class="keyword">if</span> j &lt; len(right):</span><br><span class="line">          arr[k] = right[j]</span><br><span class="line">          j += <span class="number">1</span></span><br><span class="line">      k += <span class="number">1</span></span><br></pre></td></tr></table></figure><h2 id="Count-Sort"><a href="#Count-Sort" class="headerlink" title="Count Sort"></a>Count Sort</h2><ul><li><p>특정 조건에서 선형 시간에 O(N + K)에서 정렬할 수 있는 알고리즘 이다.</p></li><li><p>최악의 경우에도 수행시간 O(N + K)를 보장 한다.</p></li><li><p>일반적으로 가장 큰 데이터와 가장 작은 데이터의 차이가 1,000,000을 넘지 않을 경우 효과적이다.</p><ul><li>데이터 크기가 한정되어 있고, 데이터의 크기가 많이 중복되어 있을수록 유리하며 항상 사용 할 수는 없다.</li></ul></li><li><p>Count Sort는 앞에서 소개 했던 비교 기반의 정렬 알고리즘이 아니다.</p></li><li><p>Example</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Implementation of Count sort</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">count_sort</span>(<span class="params">array</span>):</span></span><br><span class="line">  count = [<span class="number">0</span>] * (max(array) + <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> e <span class="keyword">in</span> array:</span><br><span class="line">    count[e] += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">  j = <span class="number">0</span></span><br><span class="line">  <span class="keyword">for</span> i <span class="keyword">in</span> range(len(count)):</span><br><span class="line">    <span class="keyword">for</span> _ <span class="keyword">in</span> range(count[i]):</span><br><span class="line">      array[j] = i</span><br><span class="line">      j += <span class="number">1</span></span><br></pre></td></tr></table></figure></li></ul><h2 id="Binary-Search"><a href="#Binary-Search" class="headerlink" title="Binary Search"></a>Binary Search</h2><ul><li><strong>IMPORTANT</strong></li><li>내부의 데이터가 정렬되어 있다는 것을 전제 하고 탐색을 O(logN) 시간에 수행 할 수 있는 알고리즘 이다.</li><li>탐색하고자 하는 데이터의 시작점, 끝점, 중간점을 가지고 찾으려고 하는 데이터와 중간점의 데이터를 비교 하면서 탐색 범위를 반으로 나누면서 탐색을 수행한다.</li><li>탐색 범위가 계속 반으로 줄기 때문에 O(logN) 시간 복잡도가 나올 수 있다.</li><li>Example:</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">binary_search_recursive</span>(<span class="params">array, target, start, end</span>):</span></span><br><span class="line">  <span class="keyword">if</span> start &gt; end:</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line"></span><br><span class="line">  mid = (start + end) // <span class="number">2</span></span><br><span class="line">  <span class="keyword">if</span> array[mid] == target:</span><br><span class="line">    <span class="keyword">return</span> mid</span><br><span class="line"></span><br><span class="line">  <span class="keyword">elif</span> array[mid] &gt; target:</span><br><span class="line">    <span class="keyword">return</span> binary_search_recursive(array, target, start, mid - <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">else</span>:</span><br><span class="line">    <span class="keyword">return</span> binary_search_recursive(array, target, mid + <span class="number">1</span>, end)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">binary_search_iterative</span>(<span class="params">array, target, start, end</span>):</span></span><br><span class="line">  <span class="keyword">while</span> start &lt;= end:</span><br><span class="line">    mid = (start + end) // <span class="number">2</span></span><br><span class="line">    <span class="keyword">if</span> array[mid] == target:</span><br><span class="line">      <span class="keyword">return</span> mid</span><br><span class="line">    <span class="keyword">elif</span> array[mid] &gt; target:</span><br><span class="line">      end = mid - <span class="number">1</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">      start = end + <span class="number">1</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="literal">None</span></span><br></pre></td></tr></table></figure><ul><li><p>lower bound</p><ul><li>정렬 되어 있을때 해당 값 이상 인 점이 처음 나오는 지점을 찾아 준다.</li><li>Python에서는 bisect를 import 하여 사용할 수 있다.</li><li>Example</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">lower_bound</span>(<span class="params">array, target, start, end</span>):</span></span><br><span class="line">  <span class="keyword">while</span> start &lt;= end:</span><br><span class="line">    mid = (start + end) // <span class="number">2</span></span><br><span class="line">    <span class="keyword">if</span> array[mid] &gt;= target:</span><br><span class="line">      end = mid - <span class="number">1</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">      start = mid + <span class="number">1</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> start</span><br></pre></td></tr></table></figure></li></ul><h2 id="The-try-with-resource-Statement"><a href="#The-try-with-resource-Statement" class="headerlink" title="The try-with-resource Statement"></a>The try-with-resource Statement</h2><p>The <code>try</code>-with-resource statement is <code>try</code> statement that declares one or more resources.<br>A <em>resource</em> is an object that must be closed after the program is finished with it.<br>The <code>try</code>-with-resources statement ensures that each resource is closed at the end of the statement.<br>Any object that implements <code>java.lang.AutoCloseable</code>, which includes all objects which implement <code>java.io.Closeable</code>, can be used as resource.</p>]]></content>
      
      
      <categories>
          
          <category> TIL </category>
          
          <category> Algorithm </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Quick Sort </tag>
            
            <tag> Merge Sort </tag>
            
            <tag> Count Sort </tag>
            
            <tag> Binary Search </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>200824 TIL</title>
      <link href="/2020/08/24/200824-TIL/"/>
      <url>/2020/08/24/200824-TIL/</url>
      
        <content type="html"><![CDATA[<h2 id="DFS"><a href="#DFS" class="headerlink" title="DFS"></a>DFS</h2><p>Depth-First Search, 깊이 우선 탐색이라고도 부르며, 그래프에서 깊은 부분을 우선적으로 탐색하는 알고리즘이다.</p><ul><li><p>Java Example</p><ul><li>TBD</li></ul></li><li><p>Python Example</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># DFS (recursive) method definition</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">dfs</span>(<span class="params">graph, v, visited</span>):</span></span><br><span class="line">  <span class="comment"># make visited true for the currently visiting node</span></span><br><span class="line">  visited[v] = <span class="literal">True</span></span><br><span class="line">  print(v, end=<span class="string">&quot; &quot;</span>)</span><br><span class="line"></span><br><span class="line">  <span class="comment"># visiting neighbor node recursively</span></span><br><span class="line">  <span class="keyword">for</span> i <span class="keyword">in</span> graph[v]:</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> visited[i]:</span><br><span class="line">      dfs(graph, i, visited)</span><br></pre></td></tr></table></figure></li></ul><h2 id="BFS"><a href="#BFS" class="headerlink" title="BFS"></a>BFS</h2><p>Breath-First Search, 너비 우선 탐색, 가까운 노드부터 시작하여 영역을 점점 넓히며 탐색 하는 알고리즘이다.</p><ul><li><p>Java Example</p><ul><li>TBD</li></ul></li><li><p>Python Example</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> collections <span class="keyword">import</span> deque</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># Implementation of BFS method</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">bfs</span>(<span class="params">graph, start, visited</span>):</span></span><br><span class="line">    <span class="comment"># using queue</span></span><br><span class="line">    queue = deque([start])</span><br><span class="line">    <span class="comment"># Make visited currently visiting node</span></span><br><span class="line">    visited[start] = <span class="literal">True</span></span><br><span class="line">    <span class="comment"># Repeat until queue is empty</span></span><br><span class="line">    <span class="keyword">while</span> queue:</span><br><span class="line">        v = queue.popleft()</span><br><span class="line">        print(v, end=<span class="string">&quot; &quot;</span>)</span><br><span class="line">        <span class="comment"># adding node to queue which is not visited and neighbor to current node</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> graph[v]:</span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> visited[i]:</span><br><span class="line">                queue.append(i)</span><br><span class="line">                visited[i] = <span class="literal">True</span></span><br></pre></td></tr></table></figure></li></ul><h2 id="Sorting"><a href="#Sorting" class="headerlink" title="Sorting"></a>Sorting</h2><h3 id="Selection-Sort"><a href="#Selection-Sort" class="headerlink" title="Selection Sort"></a>Selection Sort</h3><ul><li><p>매번 가장 작은 것을 선택하여 앞의 인덱스로 옮겨 나가는 알고리즘</p></li><li><p>선택 정렬의 시간 복잡도: O(N^2)</p></li><li><p>Python Example</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">array = [<span class="number">7</span>, <span class="number">5</span>, <span class="number">9</span>, <span class="number">0</span>, <span class="number">3</span>, <span class="number">1</span>, <span class="number">6</span>, <span class="number">2</span>, <span class="number">4</span>, <span class="number">8</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># Implementation Selection Sort</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(len(array))</span><br><span class="line">  min_index = i</span><br><span class="line">  <span class="keyword">for</span> j <span class="keyword">in</span> range(i + <span class="number">1</span>, len(array)):</span><br><span class="line">    <span class="keyword">if</span> array[min_index] &gt; array[j]:</span><br><span class="line">      min_index = j</span><br><span class="line">  array[i], array[min_index] = array[min_index], array[i]</span><br></pre></td></tr></table></figure></li></ul><h3 id="Insertion-Sort"><a href="#Insertion-Sort" class="headerlink" title="Insertion Sort"></a>Insertion Sort</h3><ul><li><p>필요한 경우 데이터의 위치를 바꾸며 정렬</p></li><li><p>현재 데이터의 상태와 상관없이 무조건 모든 원소를 비교하고 위치를 바꾸는 선택정렬과 비교</p><ul><li>데이터가 일부 정렬되어 있는 경우 유리 이런경우 O(N)에 가깝다.</li></ul></li><li><p>Python Example</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Implementation of insertion sort</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">insertion_sort</span>(<span class="params">array</span>):</span></span><br><span class="line">  <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>, len(array)):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> range(i, <span class="number">0</span>, <span class="number">-1</span>):</span><br><span class="line">      <span class="keyword">if</span> array[j] &lt; array[j - <span class="number">1</span>]:</span><br><span class="line">        array[j], array[j - <span class="number">1</span>] = array[j - <span class="number">1</span>], array[j]</span><br><span class="line">      <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">break</span></span><br></pre></td></tr></table></figure></li></ul><h2 id="Java-Exception-Handling"><a href="#Java-Exception-Handling" class="headerlink" title="Java Exception Handling"></a>Java Exception Handling</h2><h3 id="Exception"><a href="#Exception" class="headerlink" title="Exception"></a>Exception</h3><p><strong>Definition</strong>: An <em>exception</em> is an event, which occurs during the execution of a program, that distrupt the normal flow of the program’s instructions.<br>When the an error occurs within a method, the method creates an object and hands it off to the runtime system.<br>The object, called <em>exception object</em>, contains information about the error, including its type and the state of the program when the error occured.<br>Creating an exception object and handing it to the runtime system is called <em>throwing an exception</em>.</p><h3 id="Advantages-of-Exceptions"><a href="#Advantages-of-Exceptions" class="headerlink" title="Advantages of Exceptions"></a>Advantages of Exceptions</h3><p>  <strong>1. Seperating Error-Handling Code from “Regular” Code</strong></p><p>  Exceptions enable you to write the main flow of your code and to deal with the exceptional cases elsewhere.<br>  If the <code>readFile</code> function used exceptions instead of traditional error-management techniques, it would look more like the following:</p>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">readFile &#123;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    open the file;</span><br><span class="line">    determine its size;</span><br><span class="line">    allocate that much memory;</span><br><span class="line">    read the file into memory;</span><br><span class="line">    close the file;</span><br><span class="line">  &#125; <span class="keyword">catch</span> (fileOpenFailed) &#123;</span><br><span class="line">    doSomething;</span><br><span class="line">  &#125; <span class="keyword">catch</span> (sizeDeterminationFailed) &#123;</span><br><span class="line">      doSomething;</span><br><span class="line">  &#125; <span class="keyword">catch</span> (memoryAllocationFailed) &#123;</span><br><span class="line">      doSomething;</span><br><span class="line">  &#125; <span class="keyword">catch</span> (readFailed) &#123;</span><br><span class="line">      doSomething;</span><br><span class="line">  &#125; <span class="keyword">catch</span> (fileCloseFailed) &#123;</span><br><span class="line">      doSomething;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>  <strong>2. Propagating Errors Up the Call Stack</strong></p><p>  A second advantage of exceptions is the ablity to propagate error reporting up the call stack of methods.</p><p>  A method can duck any exceptions thrown within it, thereby allowing a method farther up the call stack to catch it.<br>  Hence, only the methods that care about errors have to worry about decting errors</p>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">method1 &#123;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">      call method2;</span><br><span class="line">  &#125; <span class="keyword">catch</span> (exception e) &#123;</span><br><span class="line">      doErrorProcessing;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">method2 <span class="keyword">throws</span> exception &#123;</span><br><span class="line">  call method3;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">method3 <span class="keyword">throws</span> exception &#123;</span><br><span class="line">  call readFile;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>  <strong>3. Grouping and Differentiating Error Types</strong></p><p>  Because of all exceptions thrown within a program are objects, the grouping or categorizing exceptions is a natural outcome of the class hierarchy.</p><h3 id="The-try-Block"><a href="#The-try-Block" class="headerlink" title="The try Block"></a>The <code>try</code> Block</h3><p>The first step in constructing an exception handler is to enclose the code that might throw an exception within <code>try</code> block.<br>In general, a <code>try</code> block looks like the following:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">  code</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">catch</span> and <span class="keyword">finally</span> blocks...</span><br></pre></td></tr></table></figure><p>The segment in the example labeled <code>code</code> contains one or more legal lines of code that throw an exception.</p><h3 id="The-catch-Blocks"><a href="#The-catch-Blocks" class="headerlink" title="The catch Blocks"></a>The <code>catch</code> Blocks</h3><p>You associate exception handlers with a try block by providing one or more catch blocks directly after the try block.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"></span><br><span class="line">&#125; <span class="keyword">catch</span> (ExceptionType name) &#123;</span><br><span class="line"></span><br><span class="line">&#125; <span class="keyword">catch</span> (ExceptionType name) &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Each <code>catch</code> block is an exception handler that handles the the type of exception indicated by its argument.<br>The arguments type, <code>ExceptionType</code>, declares the type of exception that the handler can handle and must be the<br>name of a class that inherits form the <code>Throwable</code> class. The handler can refer to the exception with <em>name</em>.</p><p>Exception handlers can do more than just print error messages or halt the program.<br>They can do error recovery, prompt the user to make a decision, or propagate the error up to a higher-level handler using chanined exceptions.</p><h3 id="The-finally-Block"><a href="#The-finally-Block" class="headerlink" title="The finally Block"></a>The <code>finally</code> Block</h3><p>The <code>finally</code> block <em>always</em> executes when the <code>try</code> block exits.<br>This ensures that the <code>finally</code> block is executed even if an unexpected exception occurs.<br>But finally is useful for more than just exception handling – it allows the programmer to avoid having cleanup code accidentally bypassed<br>by a <code>return</code>, <code>continue</code>, or <code>break</code>. Putting cleanup code in <code>finally</code> block is always a good practice, even when no exceptions are anticipated.</p><p><strong>Important</strong>: The <code>finally</code> block is a key tool for preventing resource leaks.<br>When closing a file or otherwise recovering resources, place the code in a <code>finally</code> block to ensure that resource is <em>always</em> recovered.</p><p>Consider using the <code>try</code>-with-resources statement in these situations, which automatically release system resource when no longer needed.</p>]]></content>
      
      
      <categories>
          
          <category> TIL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> DFS </tag>
            
            <tag> BFS </tag>
            
            <tag> Sorting </tag>
            
            <tag> Selection Sort </tag>
            
            <tag> Insertion Sort </tag>
            
            <tag> Algorithm </tag>
            
            <tag> try-catch </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>200817 TIL</title>
      <link href="/2020/08/17/200817-TIL/"/>
      <url>/2020/08/17/200817-TIL/</url>
      
        <content type="html"><![CDATA[<h2 id="JDBC-Java-Database-Connectivity"><a href="#JDBC-Java-Database-Connectivity" class="headerlink" title="JDBC(Java Database Connectivity)"></a>JDBC(Java Database Connectivity)</h2><ul><li><p>JDBC(Java Database Connectivity)의 정의</p><ul><li><p>JAVA를 이용한 Database접속과 SQL문장의 실행, 그리고 실행 결과로 얻어진 데이터의 핸들링을<br>제공하는 방법과 절차에 관한 규약</p></li><li><p>JAVA program 내에서 SQL문을 실행하기 위한 JAVA API</p></li><li><p>SQL과 programming 언어의 통합 접근 중 한 형태</p></li></ul></li><li><p>JAVA는 표준 interface인 JDBC API를 제공</p></li><li><p>Database는 vendor, 또는 기타 3rd-party에서는 JDBC interface를 구현한<br>driver를 제공한다.</p></li></ul><h3 id="JDBC-Environmental-Setup"><a href="#JDBC-Environmental-Setup" class="headerlink" title="JDBC Environmental Setup"></a>JDBC Environmental Setup</h3><ul><li><p>Install JDK</p></li><li><p>Install JDBC Driver</p><ul><li><p>Maven에 아래와 같이 의존성 추가. MySQL사이트에서 다운로드 가능.</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.45<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul></li></ul><h3 id="JDBC를-이용한-프로그래밍-방법"><a href="#JDBC를-이용한-프로그래밍-방법" class="headerlink" title="JDBC를 이용한 프로그래밍 방법"></a>JDBC를 이용한 프로그래밍 방법</h3><ol><li><code>import java.sql.*</code></li><li>JDBC 드라이버를 로드한다.</li><li>Connection 객체를 생성한다.</li><li>Statement 객체를 생성 및 질의 수행</li><li>SQL문에 결과물이 있다면 ResultSet 객체를 생성한다.</li><li>모든 객체를 닫는다.</li></ol><h3 id="JDBC-클래스의-생성-관계"><a href="#JDBC-클래스의-생성-관계" class="headerlink" title="JDBC 클래스의 생성 관계"></a>JDBC 클래스의 생성 관계</h3><p><code>DriverManager</code> -&gt; <code>Connection</code> -&gt; <code>Statement</code> -&gt; <code>ResultSet</code></p><ul><li><code>DriverManager</code>를 이용해서 Connection인스턴스를 얻는다.</li><li><code>Connection</code>을 통해서 <code>Statement</code>를 얻는다.</li><li><code>Statement</code>를 이용해 <code>ResultSet</code>을 얻는다.</li></ul><h3 id="JDBC-단계별-사용"><a href="#JDBC-단계별-사용" class="headerlink" title="JDBC 단계별 사용"></a>JDBC 단계별 사용</h3><ol><li>Import</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.sql.*;</span><br></pre></td></tr></table></figure><ol start="2"><li><code>Driver</code> 로드</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Class.forName(<span class="string">&quot;com.mysql.jdbc.Driver&quot;</span>);</span><br></pre></td></tr></table></figure><ol start="3"><li><code>Connection</code> 얻기</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">String dburl = <span class="string">&quot;jdbc:mysql://localhost/dbname&quot;</span>;</span><br><span class="line"></span><br><span class="line">Connection con = DriverManager.getConnection(dburl, ID, PWD);</span><br></pre></td></tr></table></figure><ul><li><p>1, 2, 3까지의 코드 예제</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Connection <span class="title">getConnection</span><span class="params">()</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">  String url = <span class="string">&quot;jdbc:oracle:thin:@117.16.46.111:1521:xe&quot;</span>;</span><br><span class="line">  String user = <span class="string">&quot;smu&quot;</span>;</span><br><span class="line">  String password = <span class="string">&quot;smu&quot;</span>;</span><br><span class="line">  Connection conn = <span class="keyword">null</span>;</span><br><span class="line">  Class.forName(<span class="string">&quot;oracle.jdbc.driver.OracleDriver&quot;</span>);</span><br><span class="line">  conn = DriverManager.getConnection(url, user, password);</span><br><span class="line">  <span class="keyword">return</span> conn;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><ol start="4"><li><code>Statement</code> 생성</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Statement stmt = con.createStatement();</span><br><span class="line"></span><br><span class="line">stmt.execute(“query”);        <span class="comment">//any SQL</span></span><br><span class="line">stmt.executeQuery(“query”);   <span class="comment">//SELECT</span></span><br><span class="line">stmt.executeUpdate(“query”);  <span class="comment">//INSERT, UPDATE, DELETE</span></span><br></pre></td></tr></table></figure><ol start="6"><li>ResultSet으로 결과 받기</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ResultSet rs = stmt.executeQuery(<span class="string">&quot;select no from user&quot;</span>);</span><br><span class="line"><span class="keyword">while</span> (rs.next())</span><br><span class="line">  System.out.println(rs.getInt(<span class="string">&quot;no&quot;</span>));</span><br></pre></td></tr></table></figure><ol start="7"><li>Close</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">rs.Close();</span><br><span class="line"></span><br><span class="line">stmt.close();</span><br><span class="line"></span><br><span class="line">con.close();</span><br></pre></td></tr></table></figure><ul><li><p>example 1</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> List&lt;GuestBookVO&gt; <span class="title">getGuestBookList</span><span class="params">()</span></span>&#123;</span><br><span class="line">  List&lt;GuestBookVO&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">  GuestBookVO vo = <span class="keyword">null</span>;</span><br><span class="line">  Connection conn = <span class="keyword">null</span>;</span><br><span class="line">  PreparedStatement ps = <span class="keyword">null</span>;</span><br><span class="line">  ResultSet rs = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">try</span>&#123;</span><br><span class="line">    conn = DBUtil.getConnection();</span><br><span class="line">    String sql = <span class="string">&quot;select * from guestbook&quot;</span>;</span><br><span class="line">    ps = conn.prepareStatement(sql);</span><br><span class="line">    rs = ps.executeQuery();</span><br><span class="line">    <span class="keyword">while</span>(rs.next())&#123;</span><br><span class="line">      vo = <span class="keyword">new</span> GuestBookVO();</span><br><span class="line">      vo.setNo(rs.getInt(<span class="number">1</span>));</span><br><span class="line">      vo.setId(rs.getString(<span class="number">2</span>));</span><br><span class="line">      vo.setTitle(rs.getString(<span class="number">3</span>));</span><br><span class="line">      vo.setConetnt(rs.getString(<span class="number">4</span>));</span><br><span class="line">      vo.setRegDate(rs.getString(<span class="number">5</span>));</span><br><span class="line">      list.add(vo);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;<span class="keyword">catch</span>(Exception e)&#123;</span><br><span class="line">    e.printStackTrace();</span><br><span class="line">  &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">    DBUtil.close(conn, ps, rs);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> list;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>example 2</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">addGuestBook</span><span class="params">(GuestBookVO vo)</span></span>&#123;</span><br><span class="line">  <span class="keyword">int</span> result = <span class="number">0</span>;</span><br><span class="line">  Connection conn = <span class="keyword">null</span>;</span><br><span class="line">  PreparedStatement ps = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">try</span>&#123;</span><br><span class="line">    conn = DBUtil.getConnection();</span><br><span class="line">    String sql = <span class="string">&quot;insert into guestbook values(&quot;</span></span><br><span class="line">        + <span class="string">&quot;guestbook_seq.nextval,?,?,?,sysdate)&quot;</span>;</span><br><span class="line">    ps = conn.prepareStatement(sql);</span><br><span class="line">    ps.setString(<span class="number">1</span>, vo.getId());</span><br><span class="line">    ps.setString(<span class="number">2</span>, vo.getTitle());</span><br><span class="line">    ps.setString(<span class="number">3</span>, vo.getConetnt());</span><br><span class="line">    result = ps.executeUpdate();</span><br><span class="line">  &#125;<span class="keyword">catch</span>(Exception e)&#123;</span><br><span class="line">    e.printStackTrace();</span><br><span class="line">  &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">    DBUtil.close(conn, ps);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>example 3</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">close</span><span class="params">(Connection conn, PreparedStatement ps)</span></span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (ps != <span class="keyword">null</span>) &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      ps.close();</span><br><span class="line">    &#125; <span class="keyword">catch</span> (SQLException e) &#123;e.printStackTrace(); &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (conn != <span class="keyword">null</span>) &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      conn.close();</span><br><span class="line">    &#125; <span class="keyword">catch</span> (SQLException e) &#123;e.printStackTrace();&#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul>]]></content>
      
      
      <categories>
          
          <category> TIL </category>
          
          <category> JDBC </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JDBC </tag>
            
            <tag> Database </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>200814 TIL</title>
      <link href="/2020/08/14/200814-TIL/"/>
      <url>/2020/08/14/200814-TIL/</url>
      
        <content type="html"><![CDATA[<h2 id="Wrapper-Class"><a href="#Wrapper-Class" class="headerlink" title="Wrapper Class"></a>Wrapper Class</h2><ul><li>기본형 타입을 객체로 쓰기 위해 있는 클래스</li><li>기본형 타입이 허용되지 않는 문법에 기본형 타입을 쓰기 위해서 사용</li></ul><table><thead><tr><th align="left">Type</th><th align="left">Wrapper Class</th></tr></thead><tbody><tr><td align="left">byte</td><td align="left">Byte</td></tr><tr><td align="left">char</td><td align="left">Character</td></tr><tr><td align="left">short</td><td align="left">Short</td></tr><tr><td align="left">int</td><td align="left">Integer</td></tr><tr><td align="left">long</td><td align="left">Long</td></tr><tr><td align="left">float</td><td align="left">Float</td></tr><tr><td align="left">double</td><td align="left">Double</td></tr><tr><td align="left">boolean</td><td align="left">Boolean</td></tr></tbody></table><ul><li>Examples</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Integer <span class="title">add</span><span class="params">(Integer x, Integer y)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> x + y; <span class="comment">// Unboxing</span></span><br><span class="line">    <span class="comment">// 자동으로 기본자료형으로 변형되어서 계산</span></span><br><span class="line">    <span class="comment">// 반환시 다시 Autoboxing 이루어짐</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WrapperClass</span> </span>&#123;</span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; <span class="function">T <span class="title">bypass</span><span class="params">(T x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> x;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    Integer integer = <span class="keyword">new</span> Integer(<span class="number">10</span>); <span class="comment">// Deprecated.., not recomended</span></span><br><span class="line">    Integer integer1 = Integer.valueOf(<span class="number">10</span>);</span><br><span class="line"></span><br><span class="line">    Character character = <span class="keyword">new</span> Character(<span class="string">&#x27;d&#x27;</span>);</span><br><span class="line">    Character character1 = Character.valueOf(<span class="string">&#x27;f&#x27;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Autoboxing</span></span><br><span class="line">    Integer integer2 = <span class="number">4</span>;</span><br><span class="line">    System.out.println(add(<span class="number">4</span>, <span class="number">2</span>));</span><br><span class="line"></span><br><span class="line">    bypass(<span class="number">5</span>); <span class="comment">// autoboxing</span></span><br><span class="line">    <span class="comment">// T: Wrapper class인 Integer로 결정됨</span></span><br><span class="line">    <span class="comment">// 5 -&gt; new Integer(5), Autoboxing</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 문자열 &lt;-&gt; 기본 자료형</span></span><br><span class="line">    <span class="keyword">int</span> x = Integer.parseInt(<span class="string">&quot;100&quot;</span>); <span class="comment">// recommended, parse+자료형, 정적 메소드, 리턴 타입이 int임</span></span><br><span class="line">    <span class="keyword">int</span> z = Integer.valueOf(<span class="string">&quot;200&quot;</span>); <span class="comment">// return type Integer unboxing</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="Errors-Exceptions"><a href="#Errors-Exceptions" class="headerlink" title="Errors / Exceptions"></a>Errors / Exceptions</h2><h3 id="오류-Errors"><a href="#오류-Errors" class="headerlink" title="오류 (Errors)"></a>오류 (Errors)</h3><ul><li>메모리 부족 또는 프로그램 실행이 꼬이는 경우.</li><li>더이상 어떻게 프로그램을 복구해야 할지 알 수 없다.</li><li>프로그램의 문제를 해겷하여 해결</li></ul><h3 id="예외-Exceptions"><a href="#예외-Exceptions" class="headerlink" title="예외 (Exceptions)"></a>예외 (Exceptions)</h3><ul><li>오류(Error)에 비해서 심각도가 낮고, 프로그램의 정상적인 흐름만 방해<ul><li>파일을 읽으려 했으나 해당 파일이 없는경우</li><li>네트워크 연결 유실</li></ul></li><li>문제 상황을 처리하는 로직을 구현하여, 런타임에서 자연스럽게 해결 가능</li></ul><h3 id="예외-처리-Excpetion-handling"><a href="#예외-처리-Excpetion-handling" class="headerlink" title="예외 처리 (Excpetion handling)"></a>예외 처리 (Excpetion handling)</h3><ul><li>예외가 발생 했을 경우, 이 상황을 ‘감지’하고 ‘처리’하는 코드</li><li><code>try</code> ~ <code>catch</code>, <code>throws</code>, <code>throw</code>, <code>finally</code> 키워드들을 이용</li><li><code>Throwable</code> 클래스를 상속하는 자식클래스들로 이러한 문제를 해결</li></ul><h3 id="Throwable-Class"><a href="#Throwable-Class" class="headerlink" title="Throwable Class"></a><code>Throwable</code> Class</h3><ul><li><p><code>Throwable</code> 클래스는 <code>Exception</code> 과 <code>Error</code> 클래스에 의해 상속</p><ul><li><p><code>Exception</code></p><ul><li><p><em>Checked Exceptions</em>: 예외 처리되지 않으면 컴파일이 되지 않은 예외 (file I/O)</p><ul><li><code>Exception</code> Class를 상속하고 있으면 Checked Exception</li><li><code>try</code> ~ <code>catch</code>를 통해 예외를 꼭 처리해 주어야 컴파일이 된다.</li></ul></li><li><p><em>Unchecked Exceptions</em>: 예외 처리되지 않아도 컴파일이 되는 예외</p><ul><li><code>RuntimeException</code> 클래스를 상속하고 있으면 Unchecked Exception</li><li><code>try</code> ~ <code>catch</code>를 작성하지 않더라도 빌드/실행 가능</li><li><code>ArrayIndexOutOfBoundsExceptions</code></li><li><code>ArithmeticException</code></li></ul></li></ul></li><li><p><code>Error</code>: 프로그램이 복구 불가능한 상황</p></li></ul></li></ul><table><thead><tr><th align="left">메소드</th><th align="left">설명</th></tr></thead><tbody><tr><td align="left"><code>public String getMessage()</code></td><td align="left">발생한 예외에 대한 메세지를 반환</td></tr><tr><td align="left"><code>public String getLocalizedMessage()</code></td><td align="left">오버라이드하여 추가 메세지 제공 (오버라이드하지 않으면 getMessage()와 동일)</td></tr><tr><td align="left"><code>public Throwable getCause()</code></td><td align="left">예외의 원인이 되는 Throwable 객체 반환</td></tr><tr><td align="left"><code>public void printStackTrace()</code></td><td align="left">예외가 발생된 메소드가 호출될 때의 Method call stack을 출력</td></tr></tbody></table><h4 id="try-catch-statement"><a href="#try-catch-statement" class="headerlink" title="try ~ catch statement"></a><code>try</code> ~ <code>catch</code> statement</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">  <span class="comment">// 예외가 발생할 수 있는 코드</span></span><br><span class="line">  <span class="comment">// 예외가 발생할 경우 예외 객체를 던짐 (throw)</span></span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception e) &#123; <span class="comment">// 던져진 예외를 받음 (catch)</span></span><br><span class="line">          <span class="comment">// Exception class 및 그 자식 클래스를 사용</span></span><br><span class="line">  <span class="comment">// 예외 상황을 처리해야 하는 코드</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>example</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">  <span class="keyword">int</span>[] integers = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">10</span>];</span><br><span class="line">  integers[<span class="number">20</span>] = <span class="number">5</span>;</span><br><span class="line">&#125; <span class="keyword">catch</span> (ArrayIndexOutOfBoundsException e) &#123;</span><br><span class="line">  System.out.println(e.getMessage());</span><br><span class="line">  e.printStackTrace();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Multiple-Exception-Handling"><a href="#Multiple-Exception-Handling" class="headerlink" title="Multiple Exception Handling"></a>Multiple Exception Handling</h4><ul><li>여러 개의 <code>catch</code> 구문을 사용하면 다중 예외를 처리할 수 있음</li><li>순차적으로 검사하면서 적용가능한 예외를 처리</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">  <span class="comment">// 아주 예민한 내용이 실행되는 부분</span></span><br><span class="line">  <span class="comment">// 특정 catch 구문에 선택되는 조건문</span></span><br><span class="line">  <span class="comment">// 다형성에 의해서 결정 된다.</span></span><br><span class="line">  <span class="comment">// 즉, catch 하고 있는 클래스의 자식 클래스의 객체면 catch 가능</span></span><br><span class="line">  <span class="comment">// catch 하는 순서가 중요 -&gt; 위에서 부터 자식 객체인 것이 좋다.</span></span><br><span class="line">&#125; <span class="keyword">catch</span> (ArithmeticException e) &#123;</span><br><span class="line"></span><br><span class="line">&#125; <span class="keyword">catch</span> (FileAlreadyExistsException e) &#123;</span><br><span class="line"></span><br><span class="line">&#125; <span class="keyword">catch</span> (EOFException e) &#123;</span><br><span class="line"></span><br><span class="line">&#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line"></span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception e) &#123; <span class="comment">// 나머지 모든 Exception 모두 catch</span></span><br><span class="line">                        <span class="comment">// 모든 Exception 객체의 조상</span></span><br><span class="line">                        <span class="comment">// 권장하지 않음, 무책임한 catch 이다.</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="try-catch-finally"><a href="#try-catch-finally" class="headerlink" title="try ~ catch ~ finally"></a><code>try</code> ~ <code>catch</code> ~ <code>finally</code></h4><ul><li><code>try</code> 구문 실행 중에 어떤 일이 발생해도 반드시 실행되어야 하는 구문은 finally block에 작성</li><li><code>try</code> 구문 내에 <code>return</code> 문이 있는 경우에도 finally 블록은 실행됨</li><li><code>try</code> 구문 내에서 접근한 System 자원을 안전하게 복구하기 위해 사용</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">  file = <span class="keyword">new</span> FileInputStream(<span class="string">&quot;a.txt&quot;</span>);</span><br><span class="line">  file.read();</span><br><span class="line">&#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">  System.out.println(<span class="string">&quot;파일 처리 실패&quot;</span>);</span><br><span class="line">&#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">  System.out.println(<span class="string">&quot;파이널리&quot;</span>);</span><br><span class="line">  <span class="keyword">if</span> (file != <span class="keyword">null</span>) &#123; <span class="comment">// file 읽기에 실패한 경우 파일을 닫아준다.</span></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      file.close();</span><br><span class="line">    &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">      System.out.println(<span class="string">&quot;앗!... 아아...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="try-with-resource-statement"><a href="#try-with-resource-statement" class="headerlink" title="try ~ with ~ resource statement"></a><code>try</code> ~ with ~ resource statement</h4><ul><li>Java1.7에서 추가된 기능</li><li>AutoClosable interface를 구현하는 리소스에만 사용가능</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span> (FileInputStream file1 = <span class="keyword">new</span> FileInputStream(<span class="string">&quot;a.txt&quot;</span>)) &#123;</span><br><span class="line">  file1.read();</span><br><span class="line">&#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">  System.out.println(<span class="string">&quot;파일 처리 실패&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Specifying-the-Exceptions-Thrown-by-a-Method"><a href="#Specifying-the-Exceptions-Thrown-by-a-Method" class="headerlink" title="Specifying the Exceptions Thrown by a Method"></a>Specifying the Exceptions Thrown by a Method</h3><ul><li>Checked Exception의 경우</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CheckedExceptionThrow</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">methodA</span><span class="params">()</span> <span class="keyword">throws</span> IOEception </span>&#123;</span><br><span class="line">    FileInputStream file1 = <span class="keyword">new</span> FileInputStream(<span class="string">&quot;a.txt&quot;</span>);</span><br><span class="line">    file1.read();</span><br><span class="line">    file1.close();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">methodB</span><span class="params">()</span> <span class="comment">/*throws*/</span> </span>&#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      methodA();</span><br><span class="line">    &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">      System.out.println(<span class="string">&quot;메소드에실패&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>Unchecked Exception: <code>throws</code> 키워드 사용하지 않아도 가능</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UncheckedExceptionThrows</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">methodA</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> x = <span class="number">10</span> / <span class="number">0</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">methodB</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    methodA();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      <span class="keyword">new</span> UncheckedExceptionThrow().methodB();</span><br><span class="line">    &#125; <span class="keyword">catch</span> (ArithmeticException e) &#123;</span><br><span class="line">      e.getMessage();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>method를 override할경우 부모 class 의 method exception 보다 저 조상인 exception은 던질 수 없다.</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Foo</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">methodA</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;&#125; <span class="comment">// Checked Exception</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BarOne</span> <span class="keyword">extends</span> <span class="title">Foo</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">methodA</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;&#125; <span class="comment">// possible</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BarTwo</span> <span class="keyword">extends</span> <span class="title">Foo</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">methodA</span><span class="params">()</span> <span class="keyword">throws</span> FileNotFoundEception </span>&#123;&#125; <span class="comment">// 자식 Exception은 pass 가능</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="throw"><a href="#throw" class="headerlink" title="throw"></a><code>throw</code></h3><ul><li>예외를 발생 시키는 키워드</li><li><code>new</code> 키워드로 새 Exception 객체를 생성하여 예외 내용을 작성</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">exceptMethod</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">  ...</span><br><span class="line">  <span class="keyword">if</span> (Err) &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> Exception(<span class="string">&quot;Some Error&quot;</span>); <span class="comment">// 예외 발생 및 Message 전달</span></span><br><span class="line">  &#125;</span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Custom-Exceptions"><a href="#Custom-Exceptions" class="headerlink" title="Custom Exceptions"></a>Custom Exceptions</h3><ul><li><p><code>Exception</code> 또는 <code>RuntimeException</code> Class를 상속하여 작성</p><ul><li><code>Exception</code>을 상속한경우 Checked Exception이 되어 반드시 예외를 처리해야 한다.</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyException</span> <span class="keyword">extends</span> <span class="title">RuntimeException</span> </span>&#123;</span><br><span class="line">  <span class="keyword">enum</span> ErrorCode &#123;</span><br><span class="line">    ERROR_A, ERROR_B;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> ErrorCode errorCode;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="title">MyException</span><span class="params">(ErrorCode errorCode, String message)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">super</span>(message)</span><br><span class="line">    <span class="keyword">this</span>.erroCode = errorCode;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> String <span class="title">getLocalizedMessage</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    String message = getMessage();</span><br><span class="line">    ...</span><br><span class="line">    <span class="keyword">return</span> localizedMessage;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul>]]></content>
      
      
      <categories>
          
          <category> TIL </category>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Wrapper Class </tag>
            
            <tag> Errors </tag>
            
            <tag> Exceptions </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>200813 TIL</title>
      <link href="/2020/08/13/200813-TIL/"/>
      <url>/2020/08/13/200813-TIL/</url>
      
        <content type="html"><![CDATA[<h2 id="Generics"><a href="#Generics" class="headerlink" title="Generics"></a>Generics</h2><ul><li>대상 객체의 타입을 입력 받아서 사용하는 방식</li><li>미리 사용할 수 있는 타입을 명시해서 컴파일 타임에 체크 가능<ul><li>입력을 Object로 할 수도 있으나, runtime에 <code>instanceof</code> 로 객체를 체크 해야 함</li><li>제네릭을 사용할 경우 이러한 과정 없이 간결하게 코드 작성을 할 수 있다.</li></ul></li></ul><h3 id="Generic-Class"><a href="#Generic-Class" class="headerlink" title="Generic Class"></a>Generic Class</h3><ul><li>클래스를 선언 할때는 설정되지 않은 타입이 있으며 이것을 타입 파라미터로 표현</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">GenericFoo</span>&lt;<span class="title">T</span>&gt; </span>&#123; <span class="comment">// T: type parameter</span></span><br><span class="line">  String name;</span><br><span class="line">  T memberVar;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="title">GenericFoo</span><span class="params">(String name, T memberVar)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.name = name;</span><br><span class="line">    <span class="keyword">this</span>.memberVar = memberVar;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>여러개의 타입 파라미터 또한 가능</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">HashMap</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>인터페이스도 generic이 가능하다.</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">GenericInterface</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>Geneirc type 사용시 유의점</p><ul><li><p>문법적으로 문제가 있는 경우</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Generic</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line">  <span class="keyword">static</span> T classVar; <span class="comment">// -&gt; T는 객체를 생성할 때 결정 되기 때문에 complie time에 T를 알 수 없다.</span></span><br><span class="line">  <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">mehtod</span><span class="params">(T varl)</span> </span>&#123; &#125; <span class="comment">// 마찬가지 이유로 complie time에 T를 알 수 없음</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>문법적으로는 문제가 없을 것 같으나, 안정성 문제로 금지됨 -&gt; 암기 요소</p><ol><li>Type parameter 의 instance를 생성하는 것은 불가능하다.</li><li>Generic type parameter 에 대한 instance checking은 불가능하다.</li></ol></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Generic</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line">  T memberVar = <span class="keyword">new</span> T(); <span class="comment">// -&gt; 안정성 문제 때문에 불가능</span></span><br><span class="line">  &#123;</span><br><span class="line">    Object obj = <span class="keyword">new</span> Object();</span><br><span class="line">    <span class="keyword">if</span> (obj <span class="keyword">instanceof</span> T) &#123; <span class="comment">// not possible instance 체크 불가능</span></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="Inheritance-of-Generic-Type"><a href="#Inheritance-of-Generic-Type" class="headerlink" title="Inheritance of Generic Type"></a>Inheritance of Generic Type</h3><ul><li>타입 파라미터는 부모 제네릭 타입 파라미터를 모두 채워줘야 함</li><li>추가적인 타입 파라미터도 사용할 수 있다.</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">GFoo</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">IGFoo</span>&lt;<span class="title">D</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">IGIFooTwo</span>&lt;<span class="title">K</span>, <span class="title">T</span>, <span class="title">D</span>&gt; <span class="title">extents</span> <span class="title">GFoo</span>&lt;<span class="title">T</span>&gt; <span class="keyword">implements</span> <span class="title">IGFoo</span>&lt;<span class="title">D</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>부모 클래스 / 인터페이스들에 동일한 타입 파라미터를 넘겨줄 수 있다.</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">IGIFoo</span>&lt;<span class="title">T</span>&gt; <span class="keyword">extends</span> <span class="title">GFoo</span>&lt;<span class="title">T</span>&gt; <span class="keyword">implements</span> <span class="title">IGFoo</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>타입 제한을 하지 않으면 <code>extends Object</code>와 동일하다.</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">GenericNoTypeLimit</span>&lt;<span class="title">T</span> <span class="keyword">extends</span> <span class="title">Object</span>&gt; </span>&#123;&#125;</span><br></pre></td></tr></table></figure><ul><li><code>extends</code>를 이용해서 부모 클래스를 제한 할 수 있다.</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">                                                <span class="comment">// interface upper limit</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">GenericTypeLimitation</span>&lt;<span class="title">T</span> <span class="keyword">extends</span> <span class="title">Number</span> &amp; <span class="title">Clonable</span>&gt; </span>&#123;&#125;</span><br></pre></td></tr></table></figure><h3 id="Generic-Method"><a href="#Generic-Method" class="headerlink" title="Generic Method"></a>Generic Method</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">GenericMethod</span> </span>&#123;</span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; <span class="function">T <span class="title">staticMethod</span><span class="params">(T t)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> t;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">method</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> x;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">public</span> &lt;T&gt; <span class="function">T <span class="title">method</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> x;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">public</span> &lt;T&gt; <span class="function">T <span class="title">method</span><span class="params">(T x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> x;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Wild-Card"><a href="#Wild-Card" class="headerlink" title="Wild Card"></a>Wild Card</h3><ul><li>Wild Card <code>?</code> 는 method 의 입력 타입에 Generic 이 쓰일 경우, Generic 의 타입 변수를 제한 할 수 있다.</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">WildFoo</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">WildBar</span> <span class="keyword">extends</span> <span class="title">WildFoo</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">WildGeneric</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">WildCard</span> </span>&#123;</span><br><span class="line">  <span class="keyword">public</span> &lt;T&gt; <span class="function"><span class="keyword">void</span> <span class="title">method</span><span class="params">(WildGeneric&lt;T&gt; x)</span> </span>&#123;&#125;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">mehtod1</span><span class="params">(WildGeneric&lt;?&gt; x)</span> </span>&#123;&#125; <span class="comment">// T, ?의 차이점: super 키워드를 사용하여 상한을 정할 수 있다.</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">method1_eq</span><span class="params">(WildGeneric&lt;? extends Object&gt; x)</span> </span>&#123;&#125; <span class="comment">// Object가 상한</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">method2</span><span class="params">(WildGeneric&lt;? extends WildFoo&gt; x)</span> </span>&#123;&#125; <span class="comment">// WildFoo, WildBar 상한</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">method3</span><span class="params">(WildGeneric&lt;? <span class="keyword">super</span> WildBar&gt; x)</span> </span>&#123;&#125; <span class="comment">// Object, WildFoo, WildBar, 하한</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Dynamic-Binding-JIT-Complie"><a href="#Dynamic-Binding-JIT-Complie" class="headerlink" title="Dynamic Binding: JIT Complie"></a>Dynamic Binding: JIT Complie</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">GenericMethod</span> </span>&#123;</span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; <span class="function">T <span class="title">staticMethod</span><span class="params">(T t)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> t;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">method</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> x;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">public</span> &lt;T&gt; <span class="function">T <span class="title">method</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> x;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">public</span> &lt;T&gt; <span class="function">T <span class="title">method</span><span class="params">(T x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> x;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Generics</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// Dynamic binding: behavior of method defined on runtim with JIT complication</span></span><br><span class="line">    GenericMethod.staticMethod(<span class="string">&quot;abcde&quot;</span>);</span><br><span class="line">    GenericMethod.staticMethod(<span class="number">12345</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Wrapper-Class"><a href="#Wrapper-Class" class="headerlink" title="Wrapper Class"></a>Wrapper Class</h2><ul><li>기본형 타입을 객체로 쓰기 위해 있는 클래스</li><li>기본형 타입이 허용되지 않는 문법에 기본형 타입을 쓰기 위해서 제공</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Integer <span class="title">add</span><span class="params">(Integer x, Integer y)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> x + y;</span><br><span class="line">  <span class="comment">// 자동으로 기본 자료형으로 변형 및 계산</span></span><br><span class="line">  <span class="comment">// 반환시 다시 Autoboxing이 이루어짐</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>여러가지 선언 방법들</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">Integer integer = <span class="keyword">new</span> Integer(<span class="number">10</span>);</span><br><span class="line">Interger integer1 = Integer.valueOf(<span class="number">10</span>);</span><br><span class="line"></span><br><span class="line">Charactor character = <span class="keyword">new</span> Character(<span class="string">&#x27;d&#x27;</span>);</span><br><span class="line">Charactor character1 = Character.value(<span class="string">&#x27;f&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Autoboxing</span></span><br><span class="line">Integer integer2 = <span class="number">4</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 문자열 &lt;-&gt; 기본자료형</span></span><br><span class="line"><span class="keyword">int</span> x = Integer.parseInt(<span class="string">&quot;100&quot;</span>);</span><br><span class="line"><span class="keyword">int</span> y = <span class="keyword">new</span> Integer(<span class="string">&quot;100&quot;</span>);</span><br><span class="line"><span class="keyword">int</span> z = Integer.valueOf(<span class="string">&quot;200&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> m = <span class="keyword">new</span> Integer(<span class="number">10</span>); <span class="comment">// 기본 자료형이 필요한 자리에 Wrapper class가 있을 경우 unboxing이 일어난다</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> TIL </category>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> generic </tag>
            
            <tag> wrapper class </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>200810 TIL</title>
      <link href="/2020/08/10/200810-TIL/"/>
      <url>/2020/08/10/200810-TIL/</url>
      
        <content type="html"><![CDATA[<h2 id="다형성-Polymorphism"><a href="#다형성-Polymorphism" class="headerlink" title="다형성 (Polymorphism)"></a>다형성 (Polymorphism)</h2><h3 id="다형성의-특징"><a href="#다형성의-특징" class="headerlink" title="다형성의 특징"></a>다형성의 특징</h3><ul><li><em>부모 클래스 타입으로 자식 클래스 객체를 참조하는 특징</em></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Foo</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">methodA</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Bar</span> <span class="keyword">extends</span> <span class="title">Foo</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">methodB</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>부모 클래스로 자식 클래스를 참조한 경우, 자식 클래스의 메소드는 사용할 수 없다.</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span> </span>&#123;</span><br><span class="line">    Bar bar = <span class="keyword">new</span> Bar();</span><br><span class="line">    Foo foo = (foo)bar;</span><br><span class="line"></span><br><span class="line">    foo.methodA(); <span class="comment">// works</span></span><br><span class="line">    <span class="comment">// foo.methodB(); // error</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>자식 클래스로 부모 클래스를 참조하려 하면 <code>java.lan.ClassException</code> 오류 발생</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span> </span>&#123;</span><br><span class="line">    Foo foo = <span class="keyword">new</span> Foo();</span><br><span class="line">    Bar bar;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// bar = (Bar)foo;</span></span><br><span class="line">    <span class="keyword">if</span> (foo <span class="keyword">instanceof</span> Bar) &#123; <span class="comment">// false</span></span><br><span class="line">      bar = (Bar)foo;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>Method overriding은 메모리상의 객체의 타입을 따른다. (Virtual method call)</li><li>멤버 변수의 재정의는 선언된 객체의 타입을 따른다. (문법적으로 본다)</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Foo</span> </span>&#123;</span><br><span class="line">  <span class="keyword">public</span> String x = <span class="string">&quot;Super&quot;</span>;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">methodA</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;Super&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Bar</span> <span class="keyword">extends</span> <span class="title">Foo</span> </span>&#123;</span><br><span class="line">  <span class="keyword">public</span> String x = <span class="string">&quot;Sub&quot;</span>;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">methodA</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;Sub&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span> </span>&#123;</span><br><span class="line">    Bar bar = <span class="keyword">new</span> Bar();</span><br><span class="line">    Foo foo = (Foo)bar;</span><br><span class="line"></span><br><span class="line">    System.out.println(bar.x); <span class="comment">// Sub</span></span><br><span class="line">    bar.methodA(); <span class="comment">// &quot;Sub&quot;</span></span><br><span class="line"></span><br><span class="line">    System.out.println(foo.x); <span class="comment">// Super</span></span><br><span class="line">    foo.methodA(); <span class="comment">// Virtual method call</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>Covariant return type</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Foo</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> Foo <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Bar</span> <span class="keyword">extends</span> <span class="title">Foo</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> Bar <span class="title">getInstance</span><span class="params">()</span> </span>&#123; <span class="comment">// Foo 대신 Bar로 리턴 가능</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="추상-클래스-Abstract-Class"><a href="#추상-클래스-Abstract-Class" class="headerlink" title="추상 클래스 (Abstract Class)"></a>추상 클래스 (Abstract Class)</h2><ul><li>일부 메소드가 구현되지 않고 선언만 되어 있는 클래스<ul><li>자식 클래스에서 반드시 구현해야 하는 메소드를 <code>abstract</code>로 선언</li><li>필요한 클래스가 모두 구현될 수 있도록 강제</li></ul></li></ul><h3 id="추상-클래스의-선언"><a href="#추상-클래스의-선언" class="headerlink" title="추상 클래스의 선언"></a>추상 클래스의 선언</h3><ul><li><code>abstract</code> 키워드를 이용해 class를 선언</li><li><code>abstract</code> 키워드를 이용해 abtract 키워드를 이용해 method를 선언</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">AbstractFoo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">method</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">abstractMethod</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> TIL </category>
          
          <category> Java </category>
          
          <category> Polymorphism </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> Polymorphism </tag>
            
            <tag> Abtract Class </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>200809 TIL</title>
      <link href="/2020/08/09/200809-TIL/"/>
      <url>/2020/08/09/200809-TIL/</url>
      
        <content type="html"><![CDATA[<h2 id="Data-Manipulation-Language-DML"><a href="#Data-Manipulation-Language-DML" class="headerlink" title="Data Manipulation Language, DML"></a>Data Manipulation Language, DML</h2><ul><li>SELECT - 검색</li><li>INSERT - 등록</li><li>UPDATE - 수정</li><li>DELETE - 삭제</li></ul><h3 id="SELECT"><a href="#SELECT" class="headerlink" title="SELECT"></a>SELECT</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span>(<span class="keyword">DISTINCT</span>) &#123;column_name&#125; (<span class="keyword">ALIAS</span>) <span class="keyword">FROM</span> &#123;table_name&#125;;</span><br></pre></td></tr></table></figure><table><thead><tr><th align="left">SELECT</th><th align="left">검색하고자 하는 데이터(column)를 나열</th></tr></thead><tbody><tr><td align="left">DISTINCT</td><td align="left">중복행을 제거</td></tr><tr><td align="left">ALIAS</td><td align="left">나타날 컬럼에 대한 다른 이름 부여</td></tr><tr><td align="left">FROM</td><td align="left">선택한 컬럼이 있는 테이블을 명시한다</td></tr></tbody></table><h4 id="Select-Examples"><a href="#Select-Examples" class="headerlink" title="Select Examples"></a>Select Examples</h4><ul><li>Search whole data</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> DEPARTMENT;</span><br></pre></td></tr></table></figure><ul><li>Search certain column</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> empno, <span class="keyword">name</span>, job <span class="keyword">from</span> employee;</span><br></pre></td></tr></table></figure><ul><li>Put alias to column</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> empno <span class="keyword">as</span> 사번, <span class="keyword">name</span> <span class="keyword">as</span> 이름, job <span class="keyword">as</span> 직업 <span class="keyword">from</span> employee;</span><br></pre></td></tr></table></figure><p>or</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> empno 사번, <span class="keyword">name</span> 이름, job 직업 <span class="keyword">from</span> employee;</span><br></pre></td></tr></table></figure><ul><li>Column concatenation<ul><li>using concat func</li></ul></li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">concat</span>(empno, <span class="string">&#x27;-&#x27;</span>, deptno) <span class="keyword">AS</span> <span class="string">&#x27;사번-부서번호&#x27;</span> <span class="keyword">FROM</span> employee;</span><br></pre></td></tr></table></figure><ul><li>Removing redundant row</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">DISTINCT</span> deptno <span class="keyword">FROM</span> employee;</span><br></pre></td></tr></table></figure><ul><li>Using <code>ORDER BY</code></li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span>(<span class="keyword">DISTINCT</span>) &#123;column_name&#125; ((<span class="keyword">as</span>) <span class="keyword">ALIAS</span>) <span class="keyword">FROM</span> &#123;table_name&#125; <span class="keyword">ORDER</span> <span class="keyword">BY</span> &#123;column_name&#125; (<span class="keyword">ASC</span>, <span class="keyword">DESC</span>)</span><br></pre></td></tr></table></figure><table><thead><tr><th></th><th></th></tr></thead><tbody><tr><td>ASC</td><td>by asending order (default)</td></tr><tr><td>DESC</td><td>by desending order</td></tr></tbody></table><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> empno, <span class="keyword">name</span>, job <span class="keyword">FROM</span> employee <span class="keyword">order</span> <span class="keyword">by</span> <span class="keyword">name</span> <span class="keyword">desc</span>;</span><br></pre></td></tr></table></figure><ul><li>Using <code>WHERE</code></li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span>(<span class="keyword">DISTINCT</span>) &#123;column_name&#125; <span class="keyword">FROM</span> &#123;table_name&#125; <span class="keyword">WHERE</span> &#123;contidion&#125;</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> &#123;column_name <span class="keyword">or</span> <span class="keyword">statement</span>&#125; (<span class="keyword">ASC</span>, <span class="keyword">DESC</span>)</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">name</span>, hiredate, <span class="keyword">FROM</span> employee <span class="keyword">WHERE</span> hiredate &lt; <span class="string">&#x27;1981-01-01&#x27;</span>;</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">name</span>, deptno <span class="keyword">FROM</span> employee <span class="keyword">WHERE</span> deptno <span class="keyword">in</span> (<span class="number">10</span>, <span class="number">30</span>);</span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">name</span>, deptno <span class="keyword">FROM</span> employee <span class="keyword">WHERE</span> deptno = <span class="number">10</span> <span class="keyword">or</span> deptno = <span class="number">30</span>;</span><br><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">from</span> employee <span class="keyword">WHERE</span> deptno = <span class="number">10</span> <span class="keyword">and</span> salary &lt; <span class="number">1500</span>;</span><br><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">from</span> employee <span class="keyword">WHERE</span> deptno = <span class="number">30</span> <span class="keyword">and</span> salary &lt; <span class="number">1500</span>;</span><br></pre></td></tr></table></figure><ul><li><p><code>LIKE</code> keyword</p><ul><li>using wildcard to select pattern string<ul><li><code>%</code>: 0-9a-zA-Z several charactor</li><li><code>_</code>: single charactor</li></ul></li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> employee <span class="keyword">WHERE</span> <span class="keyword">name</span> <span class="keyword">LIKE</span> <span class="string">&#x27;A%&#x27;</span></span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> employee <span class="keyword">WHERE</span> <span class="keyword">name</span> <span class="keyword">like</span> <span class="string">&#x27;_A%&#x27;</span>;</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> employee <span class="keyword">WHERE</span> <span class="keyword">name</span> <span class="keyword">like</span> <span class="string">&#x27;%A%&#x27;</span>;</span><br></pre></td></tr></table></figure></li><li><p>Using SQL function</p><ul><li><code>UCASE</code>, <code>UPPER</code></li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">UPPER</span>(<span class="string">&#x27;SEoul&#x27;</span>), <span class="keyword">UCASE</span>(<span class="string">&#x27;seOUL`);</span></span><br></pre></td></tr></table></figure><ul><li><code>LCASE</code>, <code>LOWER</code></li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">lower</span>(<span class="keyword">name</span>) <span class="keyword">FROM</span> employee;</span><br></pre></td></tr></table></figure><ul><li><p><code>SUBSTRING</code></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">SUBSTRING</span>(<span class="string">&#x27;Happy Day&#x27;</span>, <span class="number">3</span>, <span class="number">2</span>);</span><br></pre></td></tr></table></figure></li><li><p><code>LPAD</code>, <code>RPAD</code></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">LPAD</span>(<span class="string">&#x27;hi&#x27;</span>, <span class="number">5</span>, <span class="string">&#x27;?&#x27;</span>), <span class="keyword">LPAD</span>(<span class="string">&#x27;joe&#x27;</span>, <span class="string">&#x27;7&#x27;</span>, <span class="string">&#x27;*&#x27;</span>);</span><br></pre></td></tr></table></figure></li><li><p><code>TRIM</code>, <code>LTRIM</code>, <code>RTRIM</code></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">LTRIM</span>(<span class="string">&#x27; hello &#x27;</span>), <span class="keyword">RTRIM</span>(<span class="string">&#x27; hello &#x27;</span>);</span><br></pre></td></tr></table></figure></li><li><p><code>ABS(x)</code></p></li><li><p><code>MOD(n, m)</code></p></li></ul></li><li><p><code>CAST</code>: type casting CAST(expression AS type)</p></li><li><p>Group function</p><ul><li><code>COUNT()</code></li><li><code>COUNT(DISTINCT)</code></li><li><code>AVG()</code></li><li><code>MIN()</code></li><li><code>MAX()</code></li><li><code>SUM()</code></li><li><code>GROUP_CONCAT()</code></li><li><code>VARIANCE()</code></li><li><code>STDEV()</code></li></ul></li><li><p>Using group function with <code>group by</code> clause</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> deptno, <span class="keyword">avg</span>(salary), <span class="keyword">sum</span>(salary) <span class="keyword">FROM</span> employee <span class="keyword">GROUP</span> <span class="keyword">BY</span> deptno;</span><br></pre></td></tr></table></figure></li></ul><h3 id="INSERT"><a href="#INSERT" class="headerlink" title="INSERT"></a>INSERT</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> &#123;table_name&#125; (field1, field2, field3, ...)</span><br><span class="line">  <span class="keyword">VALUES</span> (value_field1, value_field2, value_field3, ...)</span><br></pre></td></tr></table></figure><ul><li>The primary key must have value, since primary key cannot be set NULL value.</li></ul><h3 id="UPDATE"><a href="#UPDATE" class="headerlink" title="UPDATE"></a>UPDATE</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">UPDATE</span> &#123;table_name&#125;</span><br><span class="line">    <span class="keyword">SET</span> field1 = value_field1, field2 = value_field2, field3 = value_field3 ...</span><br><span class="line">  <span class="keyword">WHERE</span> &#123;condition&#125;</span><br></pre></td></tr></table></figure><ul><li>When <code>WHERE</code> condition is omitted, every row is affected by <code>UPDATE</code> statement.</li></ul><h3 id="DELETE"><a href="#DELETE" class="headerlink" title="DELETE"></a>DELETE</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DELETE</span></span><br><span class="line">  <span class="keyword">FROM</span> &#123;table_name&#125;</span><br><span class="line"><span class="keyword">WHERE</span> &#123;condition&#125;</span><br></pre></td></tr></table></figure><ul><li>Keep in mind that <code>WHERE</code> condition must be included unless you intend to delete all data.</li></ul><h3 id="JOIN"><a href="#JOIN" class="headerlink" title="JOIN"></a>JOIN</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> employee.name, department.name <span class="keyword">FROM</span> employee</span><br><span class="line"><span class="keyword">JOIN</span> department <span class="keyword">ON</span> employee.deptno = department.deptno;</span><br></pre></td></tr></table></figure><h2 id="Data-Definition-Language-DDL"><a href="#Data-Definition-Language-DDL" class="headerlink" title="Data Definition Language, DDL"></a>Data Definition Language, DDL</h2><h3 id="Create-Table"><a href="#Create-Table" class="headerlink" title="Create Table"></a>Create Table</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> &#123;table_name&#125;(</span><br><span class="line">  field_name1 <span class="keyword">type</span> [<span class="literal">NULL</span> | <span class="keyword">NOT</span> <span class="literal">NULL</span>][<span class="keyword">DEFAULT</span>][AUTO_ENCREMENT],</span><br><span class="line">  field_name2 <span class="keyword">type</span> [<span class="literal">NULL</span> | <span class="keyword">NOT</span> <span class="literal">NULL</span>][<span class="keyword">DEFAULT</span>][AUTO_ENCREMENT],</span><br><span class="line">  field_name2 <span class="keyword">type</span> [<span class="literal">NULL</span> | <span class="keyword">NOT</span> <span class="literal">NULL</span>][<span class="keyword">DEFAULT</span>][AUTO_ENCREMENT],</span><br><span class="line">  ...</span><br><span class="line">  PRIMARY <span class="keyword">KEY</span> (field_name)</span><br><span class="line">)</span><br></pre></td></tr></table></figure><ul><li>Creating another employ table</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">DESC EMPLOYEE</span><br></pre></td></tr></table></figure><table><thead><tr><th align="left">Field</th><th align="left">Type</th><th align="left">Null</th><th align="left">Key</th><th align="left">Default</th><th align="left">Extra</th></tr></thead><tbody><tr><td align="left">empno</td><td align="left">int</td><td align="left">NO</td><td align="left">PRI</td><td align="left">NULL</td><td align="left"></td></tr><tr><td align="left">name</td><td align="left">varchar(10)</td><td align="left">YES</td><td align="left"></td><td align="left">NULL</td><td align="left"></td></tr><tr><td align="left">job</td><td align="left">varchar(9)</td><td align="left">YES</td><td align="left"></td><td align="left">NULL</td><td align="left"></td></tr><tr><td align="left">boss</td><td align="left">int</td><td align="left">YES</td><td align="left">MUL</td><td align="left">NULL</td><td align="left"></td></tr><tr><td align="left">hiredate</td><td align="left">varchar(12)</td><td align="left">YES</td><td align="left"></td><td align="left">NULL</td><td align="left"></td></tr><tr><td align="left">salary</td><td align="left">decimal(7,2)</td><td align="left">YES</td><td align="left"></td><td align="left">NULL</td><td align="left"></td></tr><tr><td align="left">comm</td><td align="left">decimal(7,2)</td><td align="left">YES</td><td align="left"></td><td align="left">NULL</td><td align="left"></td></tr><tr><td align="left">deptno</td><td align="left">int</td><td align="left">YES</td><td align="left">MUL</td><td align="left">NULL</td><td align="left"></td></tr></tbody></table><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> employee2 (</span><br><span class="line">  empno <span class="built_in">integer</span> <span class="keyword">not</span> <span class="literal">null</span> primary <span class="keyword">key</span>,</span><br><span class="line">  <span class="keyword">name</span> <span class="built_in">varchar</span>(<span class="number">10</span>),</span><br><span class="line">  job <span class="built_in">varchar</span>(<span class="number">9</span>),</span><br><span class="line">  boss <span class="built_in">integer</span>,</span><br><span class="line">  hiredate <span class="built_in">varchar</span>(<span class="number">12</span>),</span><br><span class="line">  salary <span class="built_in">decimal</span>(<span class="number">7</span>,<span class="number">2</span>),</span><br><span class="line">  comm <span class="built_in">decimal</span>(<span class="number">7</span>,<span class="number">2</span>),</span><br><span class="line">  deptno <span class="built_in">integer</span>);</span><br></pre></td></tr></table></figure><ul><li>Creating book table</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> book(</span><br><span class="line">  isbn <span class="built_in">varchar</span>(<span class="number">10</span>) primary <span class="keyword">key</span>,</span><br><span class="line">  title <span class="built_in">varchar</span>(<span class="number">20</span>) <span class="keyword">not</span> <span class="literal">null</span>,</span><br><span class="line">  price <span class="built_in">integer</span> <span class="keyword">not</span> <span class="literal">null</span>);</span><br></pre></td></tr></table></figure><h3 id="Alter-Table"><a href="#Alter-Table" class="headerlink" title="Alter Table"></a>Alter Table</h3><ul><li>Add column field to table</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> &#123;table_name&#125;</span><br><span class="line">  <span class="keyword">ADD</span> &#123;field_name&#125; <span class="keyword">type</span> [<span class="literal">NULL</span> | <span class="keyword">NOT</span> <span class="literal">NULL</span>][<span class="keyword">DEFAULT</span>][AUTO_INCREMENT];</span><br></pre></td></tr></table></figure><ul><li><p>example</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> book</span><br><span class="line">  <span class="keyword">add</span> author <span class="built_in">varchar</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>;</span><br></pre></td></tr></table></figure></li></ul><ul><li>Delete column field on table</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> &#123;table_name&#125;</span><br><span class="line">  <span class="keyword">drop</span> &#123;field_name&#125;;</span><br></pre></td></tr></table></figure><ul><li><p>example</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">table</span> book</span><br><span class="line">  <span class="keyword">DROP</span> price;</span><br></pre></td></tr></table></figure></li></ul><ul><li>Update column field (both its name and property)</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> &#123;table_name&#125;</span><br><span class="line">  <span class="keyword">CHANGE</span> &#123;old_field_name&#125; &#123;new_field_name&#125; [<span class="literal">NULL</span> | <span class="keyword">NOT</span> <span class="literal">NULL</span>][<span class="keyword">DEFAULT</span>][AUTO_INCREMENT];</span><br></pre></td></tr></table></figure><ul><li><p>example</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">Alter</span> <span class="keyword">table</span> employee2</span><br><span class="line">  <span class="keyword">CHANGE</span> deptno dept_no <span class="built_in">int</span>(<span class="number">11</span>);</span><br></pre></td></tr></table></figure></li></ul><ul><li>Renaming Table</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> &#123;old_table_name&#125; <span class="keyword">rename</span> &#123;new_table_name&#125;</span><br></pre></td></tr></table></figure><ul><li><p>example</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> employee2 <span class="keyword">rename</span> employee3;</span><br></pre></td></tr></table></figure></li></ul><h3 id="Drop-Table"><a href="#Drop-Table" class="headerlink" title="Drop Table"></a>Drop Table</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> &#123;table_name&#125;;</span><br></pre></td></tr></table></figure><ul><li>If there is some relational dependencies between tables, it should be deleted in reverse order of creation.</li></ul>]]></content>
      
      
      <categories>
          
          <category> TIL </category>
          
          <category> DB </category>
          
          <category> SQL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SQL </tag>
            
            <tag> DML </tag>
            
            <tag> DDL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>200808 TIL</title>
      <link href="/2020/08/08/200808-TIL/"/>
      <url>/2020/08/08/200808-TIL/</url>
      
        <content type="html"><![CDATA[<h2 id="Database-and-Database-Management-System-DBMS"><a href="#Database-and-Database-Management-System-DBMS" class="headerlink" title="Database and Database Management System (DBMS)"></a>Database and Database Management System (DBMS)</h2><p>도서관의 책들이 데이터베이스 라고 한다면, 도서관 사서 또는 도서 정보를 찾아주는 컴퓨터를 DBMS<br> 라고 할 수 있다.</p><h2 id="Database"><a href="#Database" class="headerlink" title="Database"></a>Database</h2><ul><li>데이터의 집합 (A Set of Data)</li><li>여러 응용 시스템(프로그램)들의 통합된 정보들을 저장하여 운영할 수 있는 공용(share) 데이터의 집합</li><li>효율적으로 저장, 검색, 갱신 할 수 있도록 데이터 집합들끼리 연관시키고 조직화 되어야 한다.</li></ul><h3 id="Feature-of-Database"><a href="#Feature-of-Database" class="headerlink" title="Feature of Database"></a>Feature of Database</h3><ul><li>Real-time Accessbility<ul><li>사용자 요구를 즉시 처리</li></ul></li><li>Continuous Evolution<ul><li>정확한 값을 유지하려고 삽입, 삭제, 수정 작업등을 이용해 데이터를 지속적으로 갱신</li></ul></li><li>Concurrent Sharing<ul><li>사용자마다 서로 다른 목적으로 사용하므로 동시에 여러 사람이 동일한 데이터에 접근하고 이용 할 수 있다.</li></ul></li><li>Content Reference<ul><li>저장한 데이터 레코드의 위치나 주소가 아닌 사용자가 요구하는 데이터의 내용, 즉 데이터 값에 따라 참조 할 수 있어야 한다.</li></ul></li></ul><h2 id="Database-Management-System-DBMS"><a href="#Database-Management-System-DBMS" class="headerlink" title="Database Management System (DBMS)"></a>Database Management System (DBMS)</h2><blockquote><p>A database management system (DBMS) is a software package designed to define, manipulate,<br>retrieve and manage data in database. A DBMS generally manipulates the data itself, the data<br>format, field names, record structure and file structure. It also defines rules to validate and<br>manipulate this data.</p></blockquote><ul><li>데이터베이스를 관리하는 소프트웨어</li><li>여러 응용 소프트웨어(프로그램) 또는 시스템이 동시에 데이터베이스에 접근하여 사용할 수 있게 한다.</li><li>필수 3기능<ul><li>정의기능: 데이터베이스의 논리적, 물리적 구조를 정의</li><li>조작기능: 데이터를 검색, 삭제, 갱신, 삽입, 삭제 하는 기능</li><li>제어기능: 데이터베이스의 내용 정확성과 안정성을 유지하도록 제어하는 기능</li></ul></li><li>Oracle, SQL Server, MySQL, DB2 등의 상용 또는 공개 DBMS가 있음</li></ul><h3 id="데이터베이스-관리-시스템의-장-단점"><a href="#데이터베이스-관리-시스템의-장-단점" class="headerlink" title="데이터베이스 관리 시스템의 장/단점"></a>데이터베이스 관리 시스템의 장/단점</h3><ul><li>장점<ul><li>데이터 중복이 최소화</li><li>데이터 일관성 및 무결성 유지</li><li>데이터 보안 보장</li></ul></li><li>단점<ul><li>운영비가 비싸다</li><li>백업 및 복구에 대한 관리가 복잡</li><li>부분적 데이터베이스 손실이 전체 시스템을 정지</li></ul></li></ul><h2 id="MySQL"><a href="#MySQL" class="headerlink" title="MySQL"></a>MySQL</h2><ul><li><p>Install</p><p><code>$ brew install Mysql</code></p></li><li><p>Starting server</p><p><code>$ mysql.server start</code></p><ul><li><p>starting on deamon(using HomeBrew)</p><p><code>$ brew service start mysql</code></p></li><li><p>restarting</p><p><code>$ brew service restart mysql</code></p></li><li><p>listing</p><p><code>$ brew services list</code></p></li></ul></li><li><p>Exit MySQL</p><p><code>$ mysql.server stop</code></p><ul><li><p>Quiting on HomeBrew</p><p><code>$ brew services stop mysql</code></p></li></ul></li></ul><h2 id="SQL-Structured-Query-Language"><a href="#SQL-Structured-Query-Language" class="headerlink" title="SQL(Structured Query Language)"></a>SQL(Structured Query Language)</h2><ul><li>SQL은 데이터를 보다 쉽게 검색하고 추가, 삭제, 수정 같은 조작을 할 수 있도록 고안된 컴퓨터 언어</li><li>관계형 데이터베이스에서 데이터를 조작하고 쿼리하는 표준 수단</li><li>DML(Data Manipulate Language): 데이터를 조작하기 위해서 사용, INSERT, UPDATE, DELETE, SELECT등</li><li>DDL(Data Definition Language): 데이터베이스의 스키마를 정의하거나 조작하기 위해 사용, CREATE, DROP, ALTER등</li><li>DCL(Data Control Language): 데이터를 제어하는 언어, 권한을 관리하고, 데이터의 보안, 무결성 등을 정의 GRANT, REVOKE등</li></ul><h2 id="Table"><a href="#Table" class="headerlink" title="Table"></a>Table</h2><ul><li>우리와 SpreadSheet에서의 table과 유사한 개념</li><li>데이터베이스는 table의 형태로 존재하는 것이 아님</li><li>table을 보려면 table을 생성하는 SQL을 사용해야함</li><li>테이블에 앖을 저장하려면 저장하기 위한 SQL을 사용</li></ul><h3 id="Table의-구성요소"><a href="#Table의-구성요소" class="headerlink" title="Table의 구성요소"></a>Table의 구성요소</h3><ul><li>Table: RDBMS의 기본적 저장구조, 한 개 이상의 column과 0개 이상의 row로 구성</li><li>Column: 테이블 상에서의 단일 종류의 데이터를 나타냄, 특정 데이터 타입 및 크기를 가지고 있음</li><li>Row: Column들의 값의 조합, 레코드라고 불림, 기본키에 의해서 구분 되며 기본키는 중복을 허용하지 않고, 없어서는 안됨</li><li>Field: Row와 Column의 교차점으로 Field는 데이터를 포함할 수 있고 없을때는 <code>NULL</code> 값을 가지고 있음</li></ul>]]></content>
      
      
      <categories>
          
          <category> TIL </category>
          
          <category> DB </category>
          
      </categories>
      
      
        <tags>
            
            <tag> DBMS </tag>
            
            <tag> SQL </tag>
            
            <tag> Table </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>200807-TIL</title>
      <link href="/2020/08/07/200807-TIL/"/>
      <url>/2020/08/07/200807-TIL/</url>
      
        <content type="html"><![CDATA[<h1 id="Git-Summary"><a href="#Git-Summary" class="headerlink" title="Git Summary"></a>Git Summary</h1><h2 id="git-Process-and-command"><a href="#git-Process-and-command" class="headerlink" title="git Process and command"></a>git Process and command</h2><p><img src="/images/1.png" alt="git diagram"></p><h2 id="Set-configuration"><a href="#Set-configuration" class="headerlink" title="Set configuration"></a>Set configuration</h2><pre><code>$ git config --global user.name &quot;&#123;github username&#125;&quot;$ git config --global user.email &quot;&#123;github email address&#125;&quot;$ git config --global core.editor &quot;vim&quot;$ git config --global core.pager &quot;cat&quot;$ git config --list</code></pre><ul><li>optional: <code>$ git config --global alias.lg &quot;log --color --graph --pretty=format:&#39;%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)&lt;%an&gt;%Creset&#39; --abbrev-commit&quot;</code></li></ul><h2 id="First-Repo"><a href="#First-Repo" class="headerlink" title="First Repo"></a>First Repo</h2><pre><code>$ mkdir first-repo &amp;&amp; cd first-repo$ git init$ git remote add origin https://github.com/&#123;username&#125;/&#123;reponame&#125;.git$ touch README.md$ git add README.md$ git commit -m &quot;docs: Create README.md&quot;$ git push -u origin master # setting up stream</code></pre><h2 id="Basic-workflow-of-git"><a href="#Basic-workflow-of-git" class="headerlink" title="Basic workflow of git"></a>Basic workflow of git</h2><pre><code>$ git status$ git add .$ git commit$ git push origin master</code></pre><h2 id="Commit-Convention"><a href="#Commit-Convention" class="headerlink" title="Commit Convention"></a>Commit Convention</h2><ul><li>커밋 제목은 50자 이내</li><li>제목과 내용사이 한칸</li><li>prefix를 사용하여 한눈에 커밋의 용도를 알기 쉽게 한다<ul><li>feat: features</li><li>docs: documentations</li><li>conf:  configurations</li><li>test: test</li><li>fix: bug-fix</li><li>refactor: refactoring</li><li>perf: Performance</li></ul></li></ul><h2 id="vim-key"><a href="#vim-key" class="headerlink" title="vim key"></a>vim key</h2><ul><li>A: append text at the end of the string</li><li>o: add line below</li><li>O: insert line above</li></ul><h2 id="Using-Hexo-Blog-posting"><a href="#Using-Hexo-Blog-posting" class="headerlink" title="Using Hexo: Blog posting"></a>Using Hexo: Blog posting</h2><h3 id="Dependencies"><a href="#Dependencies" class="headerlink" title="Dependencies"></a>Dependencies</h3><ol><li>git</li><li>node.js<br><code>npm install -g hexo-cli</code></li></ol><h3 id="Init-Blog"><a href="#Init-Blog" class="headerlink" title="Init Blog"></a>Init Blog</h3><pre><code>$ npm install hexo-cli -g$ hexo init blog$ cd blog$ npm install$ hexo server</code></pre><h3 id="New-Post"><a href="#New-Post" class="headerlink" title="New Post"></a>New Post</h3><pre><code>$ hexo new post &quot;&#123;file name&#125;&quot;$ vi source/_posts/&#123;file name&#125;$ `jot something`</code></pre><h3 id="Generate-test-and-deploy"><a href="#Generate-test-and-deploy" class="headerlink" title="Generate, test and deploy"></a>Generate, test and deploy</h3><pre><code>$ hexo clean &amp;&amp; hexo generate$ hexo server // local run and check whether the article is generated and displayed well.$ hexo deploy</code></pre>]]></content>
      
      
      <categories>
          
          <category> TIL </category>
          
          <category> git </category>
          
      </categories>
      
      
        <tags>
            
            <tag> git </tag>
            
            <tag> vi </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2020/08/07/hello-world/"/>
      <url>/2020/08/07/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
